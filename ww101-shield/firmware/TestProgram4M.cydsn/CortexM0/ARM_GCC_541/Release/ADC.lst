ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_Init,"ax",%progbits
  20              		.align	1
  21              		.global	ADC_Init
  22              		.code	16
  23              		.thumb_func
  24              		.type	ADC_Init, %function
  25              	ADC_Init:
  26              	.LFB2:
  27              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.40
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 2


  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00000400u, 0x00000400u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  72:Generated_Source\PSoC4/ADC.c **** }
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 3


  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  28              		.loc 1 95 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
  33              		.cfi_def_cfa_offset 32
  34              		.cfi_offset 0, -32
  35              		.cfi_offset 1, -28
  36              		.cfi_offset 2, -24
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 4


 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  42              		.loc 1 172 0
  43 0002 0321     		movs	r1, #3
  44 0004 1020     		movs	r0, #16
  45 0006 FFF7FEFF 		bl	CyIntSetPriority
  46              	.LVL0:
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  47              		.loc 1 173 0
  48 000a 3649     		ldr	r1, .L20
  49 000c 1020     		movs	r0, #16
  50 000e FFF7FEFF 		bl	CyIntSetVector
  51              	.LVL1:
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 5


  52              		.loc 1 177 0
  53 0012 0722     		movs	r2, #7
  54 0014 344B     		ldr	r3, .L20+4
  55 0016 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
  56              		.loc 1 180 0
  57 0018 344B     		ldr	r3, .L20+8
  58 001a 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  59              		.loc 1 178 0
  60 001c 002B     		cmp	r3, #0
  61 001e 01DB     		blt	.L9
  62 0020 3349     		ldr	r1, .L20+12
  63 0022 00E0     		b	.L2
  64              	.L9:
  65 0024 3349     		ldr	r1, .L20+16
  66              	.L2:
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
  67              		.loc 1 199 0 discriminator 4
  68 0026 0124     		movs	r4, #1
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  69              		.loc 1 178 0 discriminator 4
  70 0028 334A     		ldr	r2, .L20+20
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 6


 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
  71              		.loc 1 255 0 discriminator 4
  72 002a A446     		mov	ip, r4
 178:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
  73              		.loc 1 178 0 discriminator 4
  74 002c 1368     		ldr	r3, [r2]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
  75              		.loc 1 198 0 discriminator 4
  76 002e 3348     		ldr	r0, .L20+24
 178:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
  77              		.loc 1 178 0 discriminator 4
  78 0030 0B43     		orrs	r3, r1
  79 0032 1360     		str	r3, [r2]
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
  80              		.loc 1 182 0 discriminator 4
  81 0034 324A     		ldr	r2, .L20+28
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 7


  82 0036 334B     		ldr	r3, .L20+32
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
  83              		.loc 1 185 0 discriminator 4
  84 0038 3349     		ldr	r1, .L20+36
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
  85              		.loc 1 182 0 discriminator 4
  86 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
  87              		.loc 1 183 0 discriminator 4
  88 003c 334A     		ldr	r2, .L20+40
  89 003e 344B     		ldr	r3, .L20+44
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
  90              		.loc 1 206 0 discriminator 4
  91 0040 344D     		ldr	r5, .L20+48
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
  92              		.loc 1 183 0 discriminator 4
  93 0042 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
  94              		.loc 1 184 0 discriminator 4
  95 0044 0023     		movs	r3, #0
  96 0046 344A     		ldr	r2, .L20+52
  97 0048 1360     		str	r3, [r2]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
  98              		.loc 1 185 0 discriminator 4
  99 004a 344A     		ldr	r2, .L20+56
 100 004c 0A60     		str	r2, [r1]
 186:Generated_Source\PSoC4/ADC.c ****     
 101              		.loc 1 186 0 discriminator 4
 102 004e 3449     		ldr	r1, .L20+60
 103 0050 0A60     		str	r2, [r1]
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 104              		.loc 1 197 0 discriminator 4
 105 0052 3449     		ldr	r1, .L20+64
 199:Generated_Source\PSoC4/ADC.c **** 
 106              		.loc 1 199 0 discriminator 4
 107 0054 344A     		ldr	r2, .L20+68
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 108              		.loc 1 197 0 discriminator 4
 109 0056 0B60     		str	r3, [r1]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 110              		.loc 1 198 0 discriminator 4
 111 0058 0360     		str	r3, [r0]
 199:Generated_Source\PSoC4/ADC.c **** 
 112              		.loc 1 199 0 discriminator 4
 113 005a 1460     		str	r4, [r2]
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 114              		.loc 1 206 0 discriminator 4
 115 005c 2E68     		ldr	r6, [r5]
 116              	.LVL2:
 207:Generated_Source\PSoC4/ADC.c ****     
 117              		.loc 1 207 0 discriminator 4
 118 005e 334A     		ldr	r2, .L20+72
 119 0060 3240     		ands	r2, r6
 120              	.LVL3:
 218:Generated_Source\PSoC4/ADC.c ****         #else
 121              		.loc 1 218 0 discriminator 4
 122 0062 2243     		orrs	r2, r4
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 8


 123              	.LVL4:
 226:Generated_Source\PSoC4/ADC.c **** 
 124              		.loc 1 226 0 discriminator 4
 125 0064 2A60     		str	r2, [r5]
 126              	.LVL5:
 127 0066 0191     		str	r1, [sp, #4]
 128              	.LVL6:
 129              	.L8:
 234:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 130              		.loc 1 234 0
 131 0068 314C     		ldr	r4, .L20+76
 132 006a DC27     		movs	r7, #220
 236:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 133              		.loc 1 236 0
 134 006c 2500     		movs	r5, r4
 135 006e 9A00     		lsls	r2, r3, #2
 234:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 136              		.loc 1 234 0
 137 0070 1659     		ldr	r6, [r2, r4]
 236:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 138              		.loc 1 236 0
 139 0072 0C35     		adds	r5, r5, #12
 234:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 140              		.loc 1 234 0
 141 0074 BF01     		lsls	r7, r7, #6
 236:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 142              		.loc 1 236 0
 143 0076 5D5D     		ldrb	r5, [r3, r5]
 234:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 144              		.loc 1 234 0
 145 0078 3740     		ands	r7, r6
 146              	.LVL7:
 236:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 147              		.loc 1 236 0
 148 007a 3D43     		orrs	r5, r7
 149              	.LVL8:
 253:Generated_Source\PSoC4/ADC.c **** 
 150              		.loc 1 253 0
 151 007c 2D4F     		ldr	r7, .L20+80
 152 007e D719     		adds	r7, r2, r7
 153 0080 3D60     		str	r5, [r7]
 154              		.loc 1 255 0
 155 0082 6546     		mov	r5, ip
 156              	.LVL9:
 157 0084 2E42     		tst	r6, r5
 158 0086 05D0     		beq	.L3
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 159              		.loc 1 257 0
 160 0088 6646     		mov	r6, ip
 161 008a 9E40     		lsls	r6, r6, r3
 162 008c 0199     		ldr	r1, [sp, #4]
 163 008e 0D68     		ldr	r5, [r1]
 164 0090 3543     		orrs	r5, r6
 165 0092 0D60     		str	r5, [r1]
 166              	.LVL10:
 167              	.L3:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 9


 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 168              		.loc 1 260 0
 169 0094 0226     		movs	r6, #2
 170 0096 A558     		ldr	r5, [r4, r2]
 171 0098 3542     		tst	r5, r6
 172 009a 04D0     		beq	.L4
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 173              		.loc 1 262 0
 174 009c 6646     		mov	r6, ip
 175 009e 9E40     		lsls	r6, r6, r3
 176 00a0 0568     		ldr	r5, [r0]
 177 00a2 3543     		orrs	r5, r6
 178 00a4 0560     		str	r5, [r0]
 179              	.L4:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 180              		.loc 1 282 0
 181 00a6 A458     		ldr	r4, [r4, r2]
 182              	.LVL11:
 183 00a8 8027     		movs	r7, #128
 184 00aa 8026     		movs	r6, #128
 185 00ac 2100     		movs	r1, r4
 186 00ae 7F00     		lsls	r7, r7, #1
 187 00b0 B600     		lsls	r6, r6, #2
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 188              		.loc 1 284 0
 189 00b2 3C00     		movs	r4, r7
 282:Generated_Source\PSoC4/ADC.c ****         {
 190              		.loc 1 282 0
 191 00b4 3142     		tst	r1, r6
 192 00b6 01D1     		bne	.L5
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 10


 193              		.loc 1 288 0
 194 00b8 8024     		movs	r4, #128
 195 00ba 6401     		lsls	r4, r4, #5
 196              	.L5:
 197              	.LVL12:
 198 00bc 1E4E     		ldr	r6, .L20+84
 199 00be 5D00     		lsls	r5, r3, #1
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 200              		.loc 1 291 0
 201 00c0 3942     		tst	r1, r7
 202 00c2 03D1     		bne	.L6
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 203              		.loc 1 296 0
 204 00c4 6708     		lsrs	r7, r4, #1
 205 00c6 7F42     		rsbs	r7, r7, #0
 206 00c8 3FB2     		sxth	r7, r7
 207 00ca 00E0     		b	.L18
 208              	.L6:
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 209              		.loc 1 307 0
 210 00cc 0027     		movs	r7, #0
 211              	.L18:
 212 00ce 7753     		strh	r7, [r6, r5]
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 213              		.loc 1 312 0
 214 00d0 1A4D     		ldr	r5, .L20+88
 232:Generated_Source\PSoC4/ADC.c ****     {
 215              		.loc 1 232 0
 216 00d2 0133     		adds	r3, r3, #1
 217              	.LVL13:
 218              		.loc 1 312 0
 219 00d4 6C43     		muls	r4, r5
 220              	.LVL14:
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 221              		.loc 1 311 0
 222 00d6 1A4D     		ldr	r5, .L20+92
 223              		.loc 1 312 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 11


 224 00d8 E412     		asrs	r4, r4, #11
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 225              		.loc 1 311 0
 226 00da AC50     		str	r4, [r5, r2]
 232:Generated_Source\PSoC4/ADC.c ****     {
 227              		.loc 1 232 0
 228 00dc 032B     		cmp	r3, #3
 229 00de C3D1     		bne	.L8
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
 230              		.loc 1 314 0
 231              		@ sp needed
 232 00e0 F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 233              	.L21:
 234 00e2 C046     		.align	2
 235              	.L20:
 236 00e4 00000000 		.word	ADC_ISR
 237 00e8 20003A40 		.word	1077542944
 238 00ec 80033A40 		.word	1077543808
 239 00f0 402E0013 		.word	318778944
 240 00f4 402E1013 		.word	319827520
 241 00f8 00003A40 		.word	1077542912
 242 00fc 38023A40 		.word	1077543480
 243 0100 FC000080 		.word	-2147483396
 244 0104 04003A40 		.word	1077542916
 245 0108 10003A40 		.word	1077542928
 246 010c 0000FF07 		.word	134152192
 247 0110 18003A40 		.word	1077542936
 248 0114 30003A40 		.word	1077542960
 249 0118 1C003A40 		.word	1077542940
 250 011c 02000200 		.word	131074
 251 0120 14003A40 		.word	1077542932
 252 0124 28023A40 		.word	1077543464
 253 0128 18023A40 		.word	1077543448
 254 012c FFFFFFDF 		.word	-536870913
 255 0130 00000000 		.word	.LANCHOR0
 256 0134 80003A40 		.word	1077543040
 257 0138 00000000 		.word	ADC_offset
 258 013c 10270000 		.word	10000
 259 0140 00000000 		.word	ADC_countsPer10Volt
 260              		.cfi_endproc
 261              	.LFE2:
 262              		.size	ADC_Init, .-ADC_Init
 263              		.section	.text.ADC_Enable,"ax",%progbits
 264              		.align	1
 265              		.global	ADC_Enable
 266              		.code	16
 267              		.thumb_func
 268              		.type	ADC_Enable, %function
 269              	ADC_Enable:
 270              	.LFB3:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 12


 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 271              		.loc 1 331 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 0
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 275              		.loc 1 332 0
 276 0000 084B     		ldr	r3, .L27
 331:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 277              		.loc 1 331 0
 278 0002 10B5     		push	{r4, lr}
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 4, -8
 281              		.cfi_offset 14, -4
 282              		.loc 1 332 0
 283 0004 1A68     		ldr	r2, [r3]
 284 0006 002A     		cmp	r2, #0
 285 0008 0BDB     		blt	.L22
 286              	.LBB4:
 287              	.LBB5:
 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 288              		.loc 1 336 0
 289 000a 0749     		ldr	r1, .L27+4
 290              	.L25:
 291 000c 0A68     		ldr	r2, [r1]
 292 000e 002A     		cmp	r2, #0
 293 0010 FCDB     		blt	.L25
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 294              		.loc 1 342 0
 295 0012 8021     		movs	r1, #128
 296 0014 1A68     		ldr	r2, [r3]
 297 0016 0906     		lsls	r1, r1, #24
 298 0018 0A43     		orrs	r2, r1
 299 001a 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 300              		.loc 1 345 0
 301 001c 0A20     		movs	r0, #10
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 13


 302 001e FFF7FEFF 		bl	CyDelayUs
 303              	.LVL15:
 304              	.L22:
 305              	.LBE5:
 306              	.LBE4:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 307              		.loc 1 347 0
 308              		@ sp needed
 309 0022 10BD     		pop	{r4, pc}
 310              	.L28:
 311              		.align	2
 312              	.L27:
 313 0024 00003A40 		.word	1077542912
 314 0028 08023A40 		.word	1077543432
 315              		.cfi_endproc
 316              	.LFE3:
 317              		.size	ADC_Enable, .-ADC_Enable
 318              		.section	.text.ADC_Start,"ax",%progbits
 319              		.align	1
 320              		.global	ADC_Start
 321              		.code	16
 322              		.thumb_func
 323              		.type	ADC_Start, %function
 324              	ADC_Start:
 325              	.LFB1:
  64:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
 326              		.loc 1 64 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330 0000 10B5     		push	{r4, lr}
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 4, -8
 333              		.cfi_offset 14, -4
  66:Generated_Source\PSoC4/ADC.c ****     {
 334              		.loc 1 66 0
 335 0002 054C     		ldr	r4, .L31
 336 0004 2378     		ldrb	r3, [r4]
 337 0006 002B     		cmp	r3, #0
 338 0008 03D1     		bne	.L30
  68:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
 339              		.loc 1 68 0
 340 000a FFF7FEFF 		bl	ADC_Init
 341              	.LVL16:
  69:Generated_Source\PSoC4/ADC.c ****     }
 342              		.loc 1 69 0
 343 000e 0123     		movs	r3, #1
 344 0010 2370     		strb	r3, [r4]
 345              	.L30:
  71:Generated_Source\PSoC4/ADC.c **** }
 346              		.loc 1 71 0
 347 0012 FFF7FEFF 		bl	ADC_Enable
 348              	.LVL17:
  72:Generated_Source\PSoC4/ADC.c **** 
 349              		.loc 1 72 0
 350              		@ sp needed
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 14


 351 0016 10BD     		pop	{r4, pc}
 352              	.L32:
 353              		.align	2
 354              	.L31:
 355 0018 00000000 		.word	.LANCHOR1
 356              		.cfi_endproc
 357              	.LFE1:
 358              		.size	ADC_Start, .-ADC_Start
 359              		.section	.text.ADC_Stop,"ax",%progbits
 360              		.align	1
 361              		.global	ADC_Stop
 362              		.code	16
 363              		.thumb_func
 364              		.type	ADC_Stop, %function
 365              	ADC_Stop:
 366              	.LFB4:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 367              		.loc 1 366 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 372              		.loc 1 367 0
 373 0000 024A     		ldr	r2, .L34
 368:Generated_Source\PSoC4/ADC.c **** }
 374              		.loc 1 368 0
 375              		@ sp needed
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 376              		.loc 1 367 0
 377 0002 1368     		ldr	r3, [r2]
 378 0004 5B00     		lsls	r3, r3, #1
 379 0006 5B08     		lsrs	r3, r3, #1
 380 0008 1360     		str	r3, [r2]
 381              		.loc 1 368 0
 382 000a 7047     		bx	lr
 383              	.L35:
 384              		.align	2
 385              	.L34:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 15


 386 000c 00003A40 		.word	1077542912
 387              		.cfi_endproc
 388              	.LFE4:
 389              		.size	ADC_Stop, .-ADC_Stop
 390              		.section	.text.ADC_StartConvert,"ax",%progbits
 391              		.align	1
 392              		.global	ADC_StartConvert
 393              		.code	16
 394              		.thumb_func
 395              		.type	ADC_StartConvert, %function
 396              	ADC_StartConvert:
 397              	.LFB5:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 398              		.loc 1 392 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 403              		.loc 1 394 0
 404 0000 8021     		movs	r1, #128
 405 0002 034A     		ldr	r2, .L37
 406 0004 4902     		lsls	r1, r1, #9
 407 0006 1368     		ldr	r3, [r2]
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 408              		.loc 1 399 0
 409              		@ sp needed
 394:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 410              		.loc 1 394 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 16


 411 0008 0B43     		orrs	r3, r1
 412 000a 1360     		str	r3, [r2]
 413              		.loc 1 399 0
 414 000c 7047     		bx	lr
 415              	.L38:
 416 000e C046     		.align	2
 417              	.L37:
 418 0010 04003A40 		.word	1077542916
 419              		.cfi_endproc
 420              	.LFE5:
 421              		.size	ADC_StartConvert, .-ADC_StartConvert
 422              		.section	.text.ADC_StopConvert,"ax",%progbits
 423              		.align	1
 424              		.global	ADC_StopConvert
 425              		.code	16
 426              		.thumb_func
 427              		.type	ADC_StopConvert, %function
 428              	ADC_StopConvert:
 429              	.LFB6:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 430              		.loc 1 417 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 435              		.loc 1 419 0
 436 0000 024A     		ldr	r2, .L40
 437 0002 034B     		ldr	r3, .L40+4
 438 0004 1168     		ldr	r1, [r2]
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 439              		.loc 1 421 0
 440              		@ sp needed
 419:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 441              		.loc 1 419 0
 442 0006 0B40     		ands	r3, r1
 443 0008 1360     		str	r3, [r2]
 444              		.loc 1 421 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 17


 445 000a 7047     		bx	lr
 446              	.L41:
 447              		.align	2
 448              	.L40:
 449 000c 04003A40 		.word	1077542916
 450 0010 FFFFFEFF 		.word	-65537
 451              		.cfi_endproc
 452              	.LFE6:
 453              		.size	ADC_StopConvert, .-ADC_StopConvert
 454              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 455              		.align	1
 456              		.global	ADC_IsEndConversion
 457              		.code	16
 458              		.thumb_func
 459              		.type	ADC_IsEndConversion, %function
 460              	ADC_IsEndConversion:
 461              	.LFB7:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 462              		.loc 1 451 0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 0
 465              		@ frame_needed = 0, uses_anonymous_args = 0
 466              	.LVL18:
 467 0000 10B5     		push	{r4, lr}
 468              		.cfi_def_cfa_offset 8
 469              		.cfi_offset 4, -8
 470              		.cfi_offset 14, -4
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 18


 471              		.loc 1 452 0
 472 0002 0023     		movs	r3, #0
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 473              		.loc 1 454 0
 474 0004 8207     		lsls	r2, r0, #30
 475 0006 0DD0     		beq	.L47
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 476              		.loc 1 458 0 discriminator 2
 477 0008 0124     		movs	r4, #1
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 478              		.loc 1 459 0 discriminator 2
 479 000a 0233     		adds	r3, r3, #2
 458:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 480              		.loc 1 458 0 discriminator 2
 481 000c 0649     		ldr	r1, .L51
 482              		.loc 1 459 0 discriminator 2
 483 000e 1840     		ands	r0, r3
 484              	.LVL19:
 485              	.L48:
 458:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 486              		.loc 1 458 0 discriminator 2
 487 0010 0B68     		ldr	r3, [r1]
 488 0012 0122     		movs	r2, #1
 489 0014 2340     		ands	r3, r4
 490              	.LVL20:
 491              		.loc 1 459 0 discriminator 2
 492 0016 02D1     		bne	.L44
 493              		.loc 1 459 0 is_stmt 0 discriminator 1
 494 0018 0028     		cmp	r0, #0
 495 001a F9D1     		bne	.L48
 496 001c 02E0     		b	.L47
 497              	.L44:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 498              		.loc 1 464 0 is_stmt 1
 499 001e 024B     		ldr	r3, .L51
 500              	.LVL21:
 501 0020 1A60     		str	r2, [r3]
 502 0022 1300     		movs	r3, r2
 503              	.LVL22:
 504              	.L47:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 19


 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 486:Generated_Source\PSoC4/ADC.c **** }
 505              		.loc 1 486 0
 506 0024 1800     		movs	r0, r3
 507              		@ sp needed
 508 0026 10BD     		pop	{r4, pc}
 509              	.L52:
 510              		.align	2
 511              	.L51:
 512 0028 10023A40 		.word	1077543440
 513              		.cfi_endproc
 514              	.LFE7:
 515              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 516              		.section	.text.ADC_GetResult16,"ax",%progbits
 517              		.align	1
 518              		.global	ADC_GetResult16
 519              		.code	16
 520              		.thumb_func
 521              		.type	ADC_GetResult16, %function
 522              	ADC_GetResult16:
 523              	.LFB8:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 524              		.loc 1 505 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529              	.LVL23:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 20


 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 530              		.loc 1 521 0
 531 0000 0023     		movs	r3, #0
 511:Generated_Source\PSoC4/ADC.c ****     {
 532              		.loc 1 511 0
 533 0002 0228     		cmp	r0, #2
 534 0004 04D8     		bhi	.L54
 513:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 535              		.loc 1 513 0
 536 0006 034B     		ldr	r3, .L56
 537 0008 8000     		lsls	r0, r0, #2
 538              	.LVL24:
 539 000a C018     		adds	r0, r0, r3
 540 000c 0368     		ldr	r3, [r0]
 541 000e 9BB2     		uxth	r3, r3
 542              	.LVL25:
 543              	.L54:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 544              		.loc 1 525 0
 545 0010 18B2     		sxth	r0, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 546              		.loc 1 526 0
 547              		@ sp needed
 548 0012 7047     		bx	lr
 549              	.L57:
 550              		.align	2
 551              	.L56:
 552 0014 80013A40 		.word	1077543296
 553              		.cfi_endproc
 554              	.LFE8:
 555              		.size	ADC_GetResult16, .-ADC_GetResult16
 556              		.section	.text.ADC_SetChanMask,"ax",%progbits
 557              		.align	1
 558              		.global	ADC_SetChanMask
 559              		.code	16
 560              		.thumb_func
 561              		.type	ADC_SetChanMask, %function
 562              	ADC_SetChanMask:
 563              	.LFB9:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 21


 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 564              		.loc 1 550 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569              	.LVL26:
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 570              		.loc 1 551 0
 571 0000 0723     		movs	r3, #7
 572 0002 1840     		ands	r0, r3
 573              	.LVL27:
 574 0004 014B     		ldr	r3, .L59
 552:Generated_Source\PSoC4/ADC.c **** }
 575              		.loc 1 552 0
 576              		@ sp needed
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 577              		.loc 1 551 0
 578 0006 1860     		str	r0, [r3]
 579              		.loc 1 552 0
 580 0008 7047     		bx	lr
 581              	.L60:
 582 000a C046     		.align	2
 583              	.L59:
 584 000c 20003A40 		.word	1077542944
 585              		.cfi_endproc
 586              	.LFE9:
 587              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 588              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 589              		.align	1
 590              		.global	ADC_SetLowLimit
 591              		.code	16
 592              		.thumb_func
 593              		.type	ADC_SetLowLimit, %function
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 22


 594              	ADC_SetLowLimit:
 595              	.LFB10:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 596              		.loc 1 594 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601              	.LVL28:
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 602              		.loc 1 595 0
 603 0000 044A     		ldr	r2, .L62
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 604              		.loc 1 596 0
 605 0002 80B2     		uxth	r0, r0
 606              	.LVL29:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 23


 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 607              		.loc 1 595 0
 608 0004 1368     		ldr	r3, [r2]
 597:Generated_Source\PSoC4/ADC.c **** }
 609              		.loc 1 597 0
 610              		@ sp needed
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 611              		.loc 1 595 0
 612 0006 1B0C     		lsrs	r3, r3, #16
 613 0008 1B04     		lsls	r3, r3, #16
 614 000a 1360     		str	r3, [r2]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 615              		.loc 1 596 0
 616 000c 1368     		ldr	r3, [r2]
 617 000e 1843     		orrs	r0, r3
 618 0010 1060     		str	r0, [r2]
 619              		.loc 1 597 0
 620 0012 7047     		bx	lr
 621              	.L63:
 622              		.align	2
 623              	.L62:
 624 0014 18003A40 		.word	1077542936
 625              		.cfi_endproc
 626              	.LFE10:
 627              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 628              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 629              		.align	1
 630              		.global	ADC_SetHighLimit
 631              		.code	16
 632              		.thumb_func
 633              		.type	ADC_SetHighLimit, %function
 634              	ADC_SetHighLimit:
 635              	.LFB11:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 636              		.loc 1 615 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640              		@ link register save eliminated.
 641              	.LVL30:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 24


 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 642              		.loc 1 616 0
 643 0000 044B     		ldr	r3, .L65
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 644              		.loc 1 617 0
 645 0002 0004     		lsls	r0, r0, #16
 646              	.LVL31:
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 647              		.loc 1 616 0
 648 0004 1A68     		ldr	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 649              		.loc 1 618 0
 650              		@ sp needed
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 651              		.loc 1 616 0
 652 0006 92B2     		uxth	r2, r2
 653 0008 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 654              		.loc 1 617 0
 655 000a 1A68     		ldr	r2, [r3]
 656 000c 1043     		orrs	r0, r2
 657 000e 1860     		str	r0, [r3]
 658              		.loc 1 618 0
 659 0010 7047     		bx	lr
 660              	.L66:
 661 0012 C046     		.align	2
 662              	.L65:
 663 0014 18003A40 		.word	1077542936
 664              		.cfi_endproc
 665              	.LFE11:
 666              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 667              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 668              		.align	1
 669              		.global	ADC_SetLimitMask
 670              		.code	16
 671              		.thumb_func
 672              		.type	ADC_SetLimitMask, %function
 673              	ADC_SetLimitMask:
 674              	.LFB12:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 25


 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 675              		.loc 1 639 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 680              	.LVL32:
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 681              		.loc 1 640 0
 682 0000 0723     		movs	r3, #7
 683 0002 1840     		ands	r0, r3
 684              	.LVL33:
 685 0004 014B     		ldr	r3, .L68
 641:Generated_Source\PSoC4/ADC.c **** }
 686              		.loc 1 641 0
 687              		@ sp needed
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 688              		.loc 1 640 0
 689 0006 1860     		str	r0, [r3]
 690              		.loc 1 641 0
 691 0008 7047     		bx	lr
 692              	.L69:
 693 000a C046     		.align	2
 694              	.L68:
 695 000c 38023A40 		.word	1077543480
 696              		.cfi_endproc
 697              	.LFE12:
 698              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 699              		.section	.text.ADC_SetSatMask,"ax",%progbits
 700              		.align	1
 701              		.global	ADC_SetSatMask
 702              		.code	16
 703              		.thumb_func
 704              		.type	ADC_SetSatMask, %function
 705              	ADC_SetSatMask:
 706              	.LFB13:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 26


 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 707              		.loc 1 662 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 712              	.LVL34:
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 713              		.loc 1 663 0
 714 0000 0723     		movs	r3, #7
 715 0002 1840     		ands	r0, r3
 716              	.LVL35:
 717 0004 014B     		ldr	r3, .L71
 664:Generated_Source\PSoC4/ADC.c **** }
 718              		.loc 1 664 0
 719              		@ sp needed
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 720              		.loc 1 663 0
 721 0006 1860     		str	r0, [r3]
 722              		.loc 1 664 0
 723 0008 7047     		bx	lr
 724              	.L72:
 725 000a C046     		.align	2
 726              	.L71:
 727 000c 28023A40 		.word	1077543464
 728              		.cfi_endproc
 729              	.LFE13:
 730              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 731              		.section	.text.ADC_SetOffset,"ax",%progbits
 732              		.align	1
 733              		.global	ADC_SetOffset
 734              		.code	16
 735              		.thumb_func
 736              		.type	ADC_SetOffset, %function
 737              	ADC_SetOffset:
 738              	.LFB14:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 27


 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 739              		.loc 1 690 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744              	.LVL36:
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 745              		.loc 1 694 0
 746 0000 014B     		ldr	r3, .L74
 747 0002 4000     		lsls	r0, r0, #1
 748              	.LVL37:
 749 0004 C152     		strh	r1, [r0, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 750              		.loc 1 695 0
 751              		@ sp needed
 752 0006 7047     		bx	lr
 753              	.L75:
 754              		.align	2
 755              	.L74:
 756 0008 00000000 		.word	ADC_offset
 757              		.cfi_endproc
 758              	.LFE14:
 759              		.size	ADC_SetOffset, .-ADC_SetOffset
 760              		.section	.text.ADC_SetGain,"ax",%progbits
 761              		.align	1
 762              		.global	ADC_SetGain
 763              		.code	16
 764              		.thumb_func
 765              		.type	ADC_SetGain, %function
 766              	ADC_SetGain:
 767              	.LFB15:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 28


 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 768              		.loc 1 724 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 772              		@ link register save eliminated.
 773              	.LVL38:
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 774              		.loc 1 728 0
 775 0000 014B     		ldr	r3, .L77
 776 0002 8000     		lsls	r0, r0, #2
 777              	.LVL39:
 778 0004 C150     		str	r1, [r0, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 779              		.loc 1 729 0
 780              		@ sp needed
 781 0006 7047     		bx	lr
 782              	.L78:
 783              		.align	2
 784              	.L77:
 785 0008 00000000 		.word	ADC_countsPer10Volt
 786              		.cfi_endproc
 787              	.LFE15:
 788              		.size	ADC_SetGain, .-ADC_SetGain
 789              		.global	__aeabi_idiv
 790              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 791              		.align	1
 792              		.global	ADC_CountsTo_mVolts
 793              		.code	16
 794              		.thumb_func
 795              		.type	ADC_CountsTo_mVolts, %function
 796              	ADC_CountsTo_mVolts:
 797              	.LFB16:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 29


 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 798              		.loc 1 757 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              	.LVL40:
 803 0000 70B5     		push	{r4, r5, r6, lr}
 804              		.cfi_def_cfa_offset 16
 805              		.cfi_offset 4, -16
 806              		.cfi_offset 5, -12
 807              		.cfi_offset 6, -8
 808              		.cfi_offset 14, -4
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 809              		.loc 1 772 0
 810 0002 0B4B     		ldr	r3, .L82
 811 0004 0B4E     		ldr	r6, .L82+4
 812 0006 4200     		lsls	r2, r0, #1
 813 0008 8400     		lsls	r4, r0, #2
 814 000a D35A     		ldrh	r3, [r2, r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 815              		.loc 1 775 0
 816 000c 3259     		ldr	r2, [r6, r4]
 772:Generated_Source\PSoC4/ADC.c **** 
 817              		.loc 1 772 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 30


 818 000e C91A     		subs	r1, r1, r3
 819              	.LVL41:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 820              		.loc 1 774 0
 821 0010 094D     		ldr	r5, .L82+8
 822              		.loc 1 775 0
 823 0012 D30F     		lsrs	r3, r2, #31
 772:Generated_Source\PSoC4/ADC.c **** 
 824              		.loc 1 772 0
 825 0014 09B2     		sxth	r1, r1
 826              	.LVL42:
 827              		.loc 1 775 0
 828 0016 9A18     		adds	r2, r3, r2
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 829              		.loc 1 774 0
 830 0018 4D43     		muls	r5, r1
 831              		.loc 1 775 0
 832 001a 5310     		asrs	r3, r2, #1
 833 001c 0029     		cmp	r1, #0
 834 001e 01DC     		bgt	.L81
 835              		.loc 1 775 0 is_stmt 0 discriminator 2
 836 0020 5210     		asrs	r2, r2, #1
 837 0022 5342     		rsbs	r3, r2, #0
 838              	.L81:
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 839              		.loc 1 776 0 is_stmt 1
 840 0024 3159     		ldr	r1, [r6, r4]
 841              	.LVL43:
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 842              		.loc 1 778 0
 843 0026 5819     		adds	r0, r3, r5
 844              	.LVL44:
 845 0028 FFF7FEFF 		bl	__aeabi_idiv
 846              	.LVL45:
 779:Generated_Source\PSoC4/ADC.c ****     }
 847              		.loc 1 779 0
 848              		@ sp needed
 778:Generated_Source\PSoC4/ADC.c ****     }
 849              		.loc 1 778 0
 850 002c 00B2     		sxth	r0, r0
 851              		.loc 1 779 0
 852 002e 70BD     		pop	{r4, r5, r6, pc}
 853              	.L83:
 854              		.align	2
 855              	.L82:
 856 0030 00000000 		.word	ADC_offset
 857 0034 00000000 		.word	ADC_countsPer10Volt
 858 0038 10270000 		.word	10000
 859              		.cfi_endproc
 860              	.LFE16:
 861              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 862              		.global	__aeabi_lmul
 863              		.global	__aeabi_ldivmod
 864              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 865              		.align	1
 866              		.global	ADC_CountsTo_uVolts
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 31


 867              		.code	16
 868              		.thumb_func
 869              		.type	ADC_CountsTo_uVolts, %function
 870              	ADC_CountsTo_uVolts:
 871              	.LFB17:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 872              		.loc 1 811 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876              	.LVL46:
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 32


 877              		.loc 1 826 0
 878 0000 094B     		ldr	r3, .L85
 879 0002 4200     		lsls	r2, r0, #1
 880 0004 D35A     		ldrh	r3, [r2, r3]
 811:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 881              		.loc 1 811 0
 882 0006 10B5     		push	{r4, lr}
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 4, -8
 885              		.cfi_offset 14, -4
 886              		.loc 1 826 0
 887 0008 C91A     		subs	r1, r1, r3
 888              	.LVL47:
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 889              		.loc 1 828 0
 890 000a 084B     		ldr	r3, .L85+4
 891 000c 8000     		lsls	r0, r0, #2
 892              	.LVL48:
 893 000e C458     		ldr	r4, [r0, r3]
 894              	.LVL49:
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 895              		.loc 1 830 0
 896 0010 08B2     		sxth	r0, r1
 897 0012 074A     		ldr	r2, .L85+8
 898 0014 0023     		movs	r3, #0
 899 0016 C117     		asrs	r1, r0, #31
 900              	.LVL50:
 901 0018 FFF7FEFF 		bl	__aeabi_lmul
 902              	.LVL51:
 903 001c E317     		asrs	r3, r4, #31
 904 001e 2200     		movs	r2, r4
 905 0020 FFF7FEFF 		bl	__aeabi_ldivmod
 906              	.LVL52:
 831:Generated_Source\PSoC4/ADC.c ****     }
 907              		.loc 1 831 0
 908              		@ sp needed
 909 0024 10BD     		pop	{r4, pc}
 910              	.L86:
 911 0026 C046     		.align	2
 912              	.L85:
 913 0028 00000000 		.word	ADC_offset
 914 002c 00000000 		.word	ADC_countsPer10Volt
 915 0030 80969800 		.word	10000000
 916              		.cfi_endproc
 917              	.LFE17:
 918              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 919              		.global	__aeabi_i2f
 920              		.global	__aeabi_fmul
 921              		.global	__aeabi_fdiv
 922              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 923              		.align	1
 924              		.global	ADC_CountsTo_Volts
 925              		.code	16
 926              		.thumb_func
 927              		.type	ADC_CountsTo_Volts, %function
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 33


 928              	ADC_CountsTo_Volts:
 929              	.LFB18:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 930              		.loc 1 856 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              	.LVL53:
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 935              		.loc 1 871 0
 936 0000 0B4B     		ldr	r3, .L88
 937 0002 4200     		lsls	r2, r0, #1
 938 0004 D35A     		ldrh	r3, [r2, r3]
 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 939              		.loc 1 873 0
 940 0006 8000     		lsls	r0, r0, #2
 941              	.LVL54:
 871:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 34


 942              		.loc 1 871 0
 943 0008 C91A     		subs	r1, r1, r3
 944              	.LVL55:
 945              		.loc 1 873 0
 946 000a 0A4B     		ldr	r3, .L88+4
 856:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 947              		.loc 1 856 0
 948 000c 70B5     		push	{r4, r5, r6, lr}
 949              		.cfi_def_cfa_offset 16
 950              		.cfi_offset 4, -16
 951              		.cfi_offset 5, -12
 952              		.cfi_offset 6, -8
 953              		.cfi_offset 14, -4
 954              		.loc 1 873 0
 955 000e C558     		ldr	r5, [r0, r3]
 956              	.LVL56:
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 957              		.loc 1 875 0
 958 0010 08B2     		sxth	r0, r1
 959 0012 FFF7FEFF 		bl	__aeabi_i2f
 960              	.LVL57:
 961 0016 0849     		ldr	r1, .L88+8
 962 0018 FFF7FEFF 		bl	__aeabi_fmul
 963              	.LVL58:
 964 001c 041C     		adds	r4, r0, #0
 965 001e 2800     		movs	r0, r5
 966 0020 FFF7FEFF 		bl	__aeabi_i2f
 967              	.LVL59:
 968 0024 011C     		adds	r1, r0, #0
 969 0026 201C     		adds	r0, r4, #0
 970 0028 FFF7FEFF 		bl	__aeabi_fdiv
 971              	.LVL60:
 876:Generated_Source\PSoC4/ADC.c ****     }
 972              		.loc 1 876 0
 973              		@ sp needed
 974 002c 70BD     		pop	{r4, r5, r6, pc}
 975              	.L89:
 976 002e C046     		.align	2
 977              	.L88:
 978 0030 00000000 		.word	ADC_offset
 979 0034 00000000 		.word	ADC_countsPer10Volt
 980 0038 00002041 		.word	1092616192
 981              		.cfi_endproc
 982              	.LFE18:
 983              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 984              		.comm	ADC_countsPer10Volt,12,4
 985              		.comm	ADC_offset,6,2
 986              		.global	ADC_initVar
 987              		.section	.rodata
 988              		.align	2
 989              		.set	.LANCHOR0,. + 0
 990              		.type	ADC_channelsConfig, %object
 991              		.size	ADC_channelsConfig, 12
 992              	ADC_channelsConfig:
 993 0000 00040000 		.word	1024
 994 0004 00040000 		.word	1024
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 35


 995 0008 00040000 		.word	1024
 996              		.type	ADC_InputsPlacement.4914, %object
 997              		.size	ADC_InputsPlacement.4914, 3
 998              	ADC_InputsPlacement.4914:
 999 000c 00       		.byte	0
 1000 000d 01       		.byte	1
 1001 000e 02       		.byte	2
 1002              		.bss
 1003              		.set	.LANCHOR1,. + 0
 1004              		.type	ADC_initVar, %object
 1005              		.size	ADC_initVar, 1
 1006              	ADC_initVar:
 1007 0000 00       		.space	1
 1008              		.text
 1009              	.Letext0:
 1010              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1011              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 1012              		.section	.debug_info,"",%progbits
 1013              	.Ldebug_info0:
 1014 0000 44050000 		.4byte	0x544
 1015 0004 0400     		.2byte	0x4
 1016 0006 00000000 		.4byte	.Ldebug_abbrev0
 1017 000a 04       		.byte	0x4
 1018 000b 01       		.uleb128 0x1
 1019 000c 0A020000 		.4byte	.LASF63
 1020 0010 0C       		.byte	0xc
 1021 0011 D3020000 		.4byte	.LASF64
 1022 0015 8F010000 		.4byte	.LASF65
 1023 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1024 001d 00000000 		.4byte	0
 1025 0021 00000000 		.4byte	.Ldebug_line0
 1026 0025 02       		.uleb128 0x2
 1027 0026 08       		.byte	0x8
 1028 0027 07       		.byte	0x7
 1029 0028 32000000 		.4byte	.LASF0
 1030 002c 02       		.uleb128 0x2
 1031 002d 08       		.byte	0x8
 1032 002e 05       		.byte	0x5
 1033 002f 6E000000 		.4byte	.LASF1
 1034 0033 03       		.uleb128 0x3
 1035 0034 04       		.byte	0x4
 1036 0035 05       		.byte	0x5
 1037 0036 696E7400 		.ascii	"int\000"
 1038 003a 02       		.uleb128 0x2
 1039 003b 04       		.byte	0x4
 1040 003c 04       		.byte	0x4
 1041 003d FC020000 		.4byte	.LASF2
 1042 0041 02       		.uleb128 0x2
 1043 0042 02       		.byte	0x2
 1044 0043 05       		.byte	0x5
 1045 0044 49030000 		.4byte	.LASF3
 1046 0048 02       		.uleb128 0x2
 1047 0049 01       		.byte	0x1
 1048 004a 06       		.byte	0x6
 1049 004b 7C000000 		.4byte	.LASF4
 1050 004f 02       		.uleb128 0x2
 1051 0050 01       		.byte	0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 36


 1052 0051 08       		.byte	0x8
 1053 0052 30030000 		.4byte	.LASF5
 1054 0056 02       		.uleb128 0x2
 1055 0057 02       		.byte	0x2
 1056 0058 07       		.byte	0x7
 1057 0059 5D010000 		.4byte	.LASF6
 1058 005d 02       		.uleb128 0x2
 1059 005e 04       		.byte	0x4
 1060 005f 05       		.byte	0x5
 1061 0060 9F000000 		.4byte	.LASF7
 1062 0064 02       		.uleb128 0x2
 1063 0065 04       		.byte	0x4
 1064 0066 07       		.byte	0x7
 1065 0067 2C010000 		.4byte	.LASF8
 1066 006b 02       		.uleb128 0x2
 1067 006c 04       		.byte	0x4
 1068 006d 07       		.byte	0x7
 1069 006e 18010000 		.4byte	.LASF9
 1070 0072 04       		.uleb128 0x4
 1071 0073 D0000000 		.4byte	.LASF10
 1072 0077 02       		.byte	0x2
 1073 0078 BF01     		.2byte	0x1bf
 1074 007a 4F000000 		.4byte	0x4f
 1075 007e 04       		.uleb128 0x4
 1076 007f 00000000 		.4byte	.LASF11
 1077 0083 02       		.byte	0x2
 1078 0084 C001     		.2byte	0x1c0
 1079 0086 56000000 		.4byte	0x56
 1080 008a 04       		.uleb128 0x4
 1081 008b E7000000 		.4byte	.LASF12
 1082 008f 02       		.byte	0x2
 1083 0090 C101     		.2byte	0x1c1
 1084 0092 64000000 		.4byte	0x64
 1085 0096 04       		.uleb128 0x4
 1086 0097 9B030000 		.4byte	.LASF13
 1087 009b 02       		.byte	0x2
 1088 009c C301     		.2byte	0x1c3
 1089 009e 41000000 		.4byte	0x41
 1090 00a2 04       		.uleb128 0x4
 1091 00a3 8F000000 		.4byte	.LASF14
 1092 00a7 02       		.byte	0x2
 1093 00a8 C401     		.2byte	0x1c4
 1094 00aa 5D000000 		.4byte	0x5d
 1095 00ae 04       		.uleb128 0x4
 1096 00af D3010000 		.4byte	.LASF15
 1097 00b3 02       		.byte	0x2
 1098 00b4 C501     		.2byte	0x1c5
 1099 00b6 3A000000 		.4byte	0x3a
 1100 00ba 02       		.uleb128 0x2
 1101 00bb 08       		.byte	0x8
 1102 00bc 04       		.byte	0x4
 1103 00bd E0000000 		.4byte	.LASF16
 1104 00c1 04       		.uleb128 0x4
 1105 00c2 AC020000 		.4byte	.LASF17
 1106 00c6 02       		.byte	0x2
 1107 00c7 CA01     		.2byte	0x1ca
 1108 00c9 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 37


 1109 00cd 02       		.uleb128 0x2
 1110 00ce 01       		.byte	0x1
 1111 00cf 08       		.byte	0x8
 1112 00d0 67030000 		.4byte	.LASF18
 1113 00d4 04       		.uleb128 0x4
 1114 00d5 CD010000 		.4byte	.LASF19
 1115 00d9 02       		.byte	0x2
 1116 00da 6B02     		.2byte	0x26b
 1117 00dc E0000000 		.4byte	0xe0
 1118 00e0 05       		.uleb128 0x5
 1119 00e1 8A000000 		.4byte	0x8a
 1120 00e5 02       		.uleb128 0x2
 1121 00e6 08       		.byte	0x8
 1122 00e7 04       		.byte	0x4
 1123 00e8 ED010000 		.4byte	.LASF20
 1124 00ec 02       		.uleb128 0x2
 1125 00ed 04       		.byte	0x4
 1126 00ee 07       		.byte	0x7
 1127 00ef DB010000 		.4byte	.LASF21
 1128 00f3 06       		.uleb128 0x6
 1129 00f4 90030000 		.4byte	.LASF66
 1130 00f8 01       		.byte	0x1
 1131 00f9 4A01     		.2byte	0x14a
 1132 00fb 01       		.byte	0x1
 1133 00fc 07       		.uleb128 0x7
 1134 00fd 29000000 		.4byte	.LASF26
 1135 0101 01       		.byte	0x1
 1136 0102 5E       		.byte	0x5e
 1137 0103 00000000 		.4byte	.LFB2
 1138 0107 44010000 		.4byte	.LFE2-.LFB2
 1139 010b 01       		.uleb128 0x1
 1140 010c 9C       		.byte	0x9c
 1141 010d 77010000 		.4byte	0x177
 1142 0111 08       		.uleb128 0x8
 1143 0112 5C030000 		.4byte	.LASF22
 1144 0116 01       		.byte	0x1
 1145 0117 60       		.byte	0x60
 1146 0118 8A000000 		.4byte	0x8a
 1147 011c 00000000 		.4byte	.LLST0
 1148 0120 08       		.uleb128 0x8
 1149 0121 53010000 		.4byte	.LASF23
 1150 0125 01       		.byte	0x1
 1151 0126 61       		.byte	0x61
 1152 0127 8A000000 		.4byte	0x8a
 1153 012b 1F000000 		.4byte	.LLST1
 1154 012f 08       		.uleb128 0x8
 1155 0130 0F000000 		.4byte	.LASF24
 1156 0134 01       		.byte	0x1
 1157 0135 62       		.byte	0x62
 1158 0136 A2000000 		.4byte	0xa2
 1159 013a CD000000 		.4byte	.LLST2
 1160 013e 09       		.uleb128 0x9
 1161 013f 49000000 		.4byte	.LASF25
 1162 0143 01       		.byte	0x1
 1163 0144 65       		.byte	0x65
 1164 0145 8C010000 		.4byte	0x18c
 1165 0149 05       		.uleb128 0x5
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 38


 1166 014a 03       		.byte	0x3
 1167 014b 0C000000 		.4byte	ADC_InputsPlacement.4914
 1168 014f 0A       		.uleb128 0xa
 1169 0150 0A000000 		.4byte	.LVL0
 1170 0154 26050000 		.4byte	0x526
 1171 0158 67010000 		.4byte	0x167
 1172 015c 0B       		.uleb128 0xb
 1173 015d 01       		.uleb128 0x1
 1174 015e 50       		.byte	0x50
 1175 015f 01       		.uleb128 0x1
 1176 0160 40       		.byte	0x40
 1177 0161 0B       		.uleb128 0xb
 1178 0162 01       		.uleb128 0x1
 1179 0163 51       		.byte	0x51
 1180 0164 01       		.uleb128 0x1
 1181 0165 33       		.byte	0x33
 1182 0166 00       		.byte	0
 1183 0167 0C       		.uleb128 0xc
 1184 0168 12000000 		.4byte	.LVL1
 1185 016c 31050000 		.4byte	0x531
 1186 0170 0B       		.uleb128 0xb
 1187 0171 01       		.uleb128 0x1
 1188 0172 50       		.byte	0x50
 1189 0173 01       		.uleb128 0x1
 1190 0174 40       		.byte	0x40
 1191 0175 00       		.byte	0
 1192 0176 00       		.byte	0
 1193 0177 0D       		.uleb128 0xd
 1194 0178 87010000 		.4byte	0x187
 1195 017c 87010000 		.4byte	0x187
 1196 0180 0E       		.uleb128 0xe
 1197 0181 EC000000 		.4byte	0xec
 1198 0185 02       		.byte	0x2
 1199 0186 00       		.byte	0
 1200 0187 0F       		.uleb128 0xf
 1201 0188 72000000 		.4byte	0x72
 1202 018c 0F       		.uleb128 0xf
 1203 018d 77010000 		.4byte	0x177
 1204 0191 10       		.uleb128 0x10
 1205 0192 F3000000 		.4byte	0xf3
 1206 0196 00000000 		.4byte	.LFB3
 1207 019a 2C000000 		.4byte	.LFE3-.LFB3
 1208 019e 01       		.uleb128 0x1
 1209 019f 9C       		.byte	0x9c
 1210 01a0 B4010000 		.4byte	0x1b4
 1211 01a4 0C       		.uleb128 0xc
 1212 01a5 22000000 		.4byte	.LVL15
 1213 01a9 3C050000 		.4byte	0x53c
 1214 01ad 0B       		.uleb128 0xb
 1215 01ae 01       		.uleb128 0x1
 1216 01af 50       		.byte	0x50
 1217 01b0 01       		.uleb128 0x1
 1218 01b1 3A       		.byte	0x3a
 1219 01b2 00       		.byte	0
 1220 01b3 00       		.byte	0
 1221 01b4 07       		.uleb128 0x7
 1222 01b5 95000000 		.4byte	.LASF27
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 39


 1223 01b9 01       		.byte	0x1
 1224 01ba 3F       		.byte	0x3f
 1225 01bb 00000000 		.4byte	.LFB1
 1226 01bf 1C000000 		.4byte	.LFE1-.LFB1
 1227 01c3 01       		.uleb128 0x1
 1228 01c4 9C       		.byte	0x9c
 1229 01c5 DC010000 		.4byte	0x1dc
 1230 01c9 11       		.uleb128 0x11
 1231 01ca 0E000000 		.4byte	.LVL16
 1232 01ce FC000000 		.4byte	0xfc
 1233 01d2 11       		.uleb128 0x11
 1234 01d3 16000000 		.4byte	.LVL17
 1235 01d7 F3000000 		.4byte	0xf3
 1236 01db 00       		.byte	0
 1237 01dc 12       		.uleb128 0x12
 1238 01dd 53030000 		.4byte	.LASF28
 1239 01e1 01       		.byte	0x1
 1240 01e2 6D01     		.2byte	0x16d
 1241 01e4 00000000 		.4byte	.LFB4
 1242 01e8 10000000 		.4byte	.LFE4-.LFB4
 1243 01ec 01       		.uleb128 0x1
 1244 01ed 9C       		.byte	0x9c
 1245 01ee 12       		.uleb128 0x12
 1246 01ef 5D000000 		.4byte	.LASF29
 1247 01f3 01       		.byte	0x1
 1248 01f4 8701     		.2byte	0x187
 1249 01f6 00000000 		.4byte	.LFB5
 1250 01fa 14000000 		.4byte	.LFE5-.LFB5
 1251 01fe 01       		.uleb128 0x1
 1252 01ff 9C       		.byte	0x9c
 1253 0200 12       		.uleb128 0x12
 1254 0201 7F010000 		.4byte	.LASF30
 1255 0205 01       		.byte	0x1
 1256 0206 A001     		.2byte	0x1a0
 1257 0208 00000000 		.4byte	.LFB6
 1258 020c 14000000 		.4byte	.LFE6-.LFB6
 1259 0210 01       		.uleb128 0x1
 1260 0211 9C       		.byte	0x9c
 1261 0212 13       		.uleb128 0x13
 1262 0213 98020000 		.4byte	.LASF32
 1263 0217 01       		.byte	0x1
 1264 0218 C201     		.2byte	0x1c2
 1265 021a 8A000000 		.4byte	0x8a
 1266 021e 00000000 		.4byte	.LFB7
 1267 0222 2C000000 		.4byte	.LFE7-.LFB7
 1268 0226 01       		.uleb128 0x1
 1269 0227 9C       		.byte	0x9c
 1270 0228 4D020000 		.4byte	0x24d
 1271 022c 14       		.uleb128 0x14
 1272 022d FF000000 		.4byte	.LASF34
 1273 0231 01       		.byte	0x1
 1274 0232 C201     		.2byte	0x1c2
 1275 0234 8A000000 		.4byte	0x8a
 1276 0238 E0000000 		.4byte	.LLST3
 1277 023c 15       		.uleb128 0x15
 1278 023d 88000000 		.4byte	.LASF31
 1279 0241 01       		.byte	0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 40


 1280 0242 C401     		.2byte	0x1c4
 1281 0244 8A000000 		.4byte	0x8a
 1282 0248 01010000 		.4byte	.LLST4
 1283 024c 00       		.byte	0
 1284 024d 13       		.uleb128 0x13
 1285 024e B6030000 		.4byte	.LASF33
 1286 0252 01       		.byte	0x1
 1287 0253 F801     		.2byte	0x1f8
 1288 0255 96000000 		.4byte	0x96
 1289 0259 00000000 		.4byte	.LFB8
 1290 025d 18000000 		.4byte	.LFE8-.LFB8
 1291 0261 01       		.uleb128 0x1
 1292 0262 9C       		.byte	0x9c
 1293 0263 86020000 		.4byte	0x286
 1294 0267 14       		.uleb128 0x14
 1295 0268 62030000 		.4byte	.LASF35
 1296 026c 01       		.byte	0x1
 1297 026d F801     		.2byte	0x1f8
 1298 026f 8A000000 		.4byte	0x8a
 1299 0273 20010000 		.4byte	.LLST5
 1300 0277 16       		.uleb128 0x16
 1301 0278 AF030000 		.4byte	.LASF36
 1302 027c 01       		.byte	0x1
 1303 027d FA01     		.2byte	0x1fa
 1304 027f 8A000000 		.4byte	0x8a
 1305 0283 01       		.uleb128 0x1
 1306 0284 53       		.byte	0x53
 1307 0285 00       		.byte	0
 1308 0286 17       		.uleb128 0x17
 1309 0287 C3020000 		.4byte	.LASF37
 1310 028b 01       		.byte	0x1
 1311 028c 2502     		.2byte	0x225
 1312 028e 00000000 		.4byte	.LFB9
 1313 0292 10000000 		.4byte	.LFE9-.LFB9
 1314 0296 01       		.uleb128 0x1
 1315 0297 9C       		.byte	0x9c
 1316 0298 AD020000 		.4byte	0x2ad
 1317 029c 14       		.uleb128 0x14
 1318 029d EE000000 		.4byte	.LASF38
 1319 02a1 01       		.byte	0x1
 1320 02a2 2502     		.2byte	0x225
 1321 02a4 8A000000 		.4byte	0x8a
 1322 02a8 41010000 		.4byte	.LLST6
 1323 02ac 00       		.byte	0
 1324 02ad 17       		.uleb128 0x17
 1325 02ae 20030000 		.4byte	.LASF39
 1326 02b2 01       		.byte	0x1
 1327 02b3 5102     		.2byte	0x251
 1328 02b5 00000000 		.4byte	.LFB10
 1329 02b9 18000000 		.4byte	.LFE10-.LFB10
 1330 02bd 01       		.uleb128 0x1
 1331 02be 9C       		.byte	0x9c
 1332 02bf D4020000 		.4byte	0x2d4
 1333 02c3 14       		.uleb128 0x14
 1334 02c4 E4010000 		.4byte	.LASF40
 1335 02c8 01       		.byte	0x1
 1336 02c9 5102     		.2byte	0x251
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 41


 1337 02cb 8A000000 		.4byte	0x8a
 1338 02cf 62010000 		.4byte	.LLST7
 1339 02d3 00       		.byte	0
 1340 02d4 17       		.uleb128 0x17
 1341 02d5 F9010000 		.4byte	.LASF41
 1342 02d9 01       		.byte	0x1
 1343 02da 6602     		.2byte	0x266
 1344 02dc 00000000 		.4byte	.LFB11
 1345 02e0 18000000 		.4byte	.LFE11-.LFB11
 1346 02e4 01       		.uleb128 0x1
 1347 02e5 9C       		.byte	0x9c
 1348 02e6 FB020000 		.4byte	0x2fb
 1349 02ea 14       		.uleb128 0x14
 1350 02eb 02030000 		.4byte	.LASF42
 1351 02ef 01       		.byte	0x1
 1352 02f0 6602     		.2byte	0x266
 1353 02f2 8A000000 		.4byte	0x8a
 1354 02f6 83010000 		.4byte	.LLST8
 1355 02fa 00       		.byte	0
 1356 02fb 17       		.uleb128 0x17
 1357 02fc 07010000 		.4byte	.LASF43
 1358 0300 01       		.byte	0x1
 1359 0301 7E02     		.2byte	0x27e
 1360 0303 00000000 		.4byte	.LFB12
 1361 0307 10000000 		.4byte	.LFE12-.LFB12
 1362 030b 01       		.uleb128 0x1
 1363 030c 9C       		.byte	0x9c
 1364 030d 22030000 		.4byte	0x322
 1365 0311 14       		.uleb128 0x14
 1366 0312 EE000000 		.4byte	.LASF38
 1367 0316 01       		.byte	0x1
 1368 0317 7E02     		.2byte	0x27e
 1369 0319 8A000000 		.4byte	0x8a
 1370 031d A4010000 		.4byte	.LLST9
 1371 0321 00       		.byte	0
 1372 0322 17       		.uleb128 0x17
 1373 0323 3E010000 		.4byte	.LASF44
 1374 0327 01       		.byte	0x1
 1375 0328 9502     		.2byte	0x295
 1376 032a 00000000 		.4byte	.LFB13
 1377 032e 10000000 		.4byte	.LFE13-.LFB13
 1378 0332 01       		.uleb128 0x1
 1379 0333 9C       		.byte	0x9c
 1380 0334 49030000 		.4byte	0x349
 1381 0338 14       		.uleb128 0x14
 1382 0339 EE000000 		.4byte	.LASF38
 1383 033d 01       		.byte	0x1
 1384 033e 9502     		.2byte	0x295
 1385 0340 8A000000 		.4byte	0x8a
 1386 0344 C5010000 		.4byte	.LLST10
 1387 0348 00       		.byte	0
 1388 0349 17       		.uleb128 0x17
 1389 034a A1030000 		.4byte	.LASF45
 1390 034e 01       		.byte	0x1
 1391 034f B102     		.2byte	0x2b1
 1392 0351 00000000 		.4byte	.LFB14
 1393 0355 0C000000 		.4byte	.LFE14-.LFB14
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 42


 1394 0359 01       		.uleb128 0x1
 1395 035a 9C       		.byte	0x9c
 1396 035b 7E030000 		.4byte	0x37e
 1397 035f 14       		.uleb128 0x14
 1398 0360 62030000 		.4byte	.LASF35
 1399 0364 01       		.byte	0x1
 1400 0365 B102     		.2byte	0x2b1
 1401 0367 8A000000 		.4byte	0x8a
 1402 036b E6010000 		.4byte	.LLST11
 1403 036f 18       		.uleb128 0x18
 1404 0370 7F030000 		.4byte	.LASF46
 1405 0374 01       		.byte	0x1
 1406 0375 B102     		.2byte	0x2b1
 1407 0377 96000000 		.4byte	0x96
 1408 037b 01       		.uleb128 0x1
 1409 037c 51       		.byte	0x51
 1410 037d 00       		.byte	0
 1411 037e 17       		.uleb128 0x17
 1412 037f F0020000 		.4byte	.LASF47
 1413 0383 01       		.byte	0x1
 1414 0384 D302     		.2byte	0x2d3
 1415 0386 00000000 		.4byte	.LFB15
 1416 038a 0C000000 		.4byte	.LFE15-.LFB15
 1417 038e 01       		.uleb128 0x1
 1418 038f 9C       		.byte	0x9c
 1419 0390 B3030000 		.4byte	0x3b3
 1420 0394 14       		.uleb128 0x14
 1421 0395 62030000 		.4byte	.LASF35
 1422 0399 01       		.byte	0x1
 1423 039a D302     		.2byte	0x2d3
 1424 039c 8A000000 		.4byte	0x8a
 1425 03a0 07020000 		.4byte	.LLST12
 1426 03a4 18       		.uleb128 0x18
 1427 03a5 07000000 		.4byte	.LASF48
 1428 03a9 01       		.byte	0x1
 1429 03aa D302     		.2byte	0x2d3
 1430 03ac A2000000 		.4byte	0xa2
 1431 03b0 01       		.uleb128 0x1
 1432 03b1 51       		.byte	0x51
 1433 03b2 00       		.byte	0
 1434 03b3 19       		.uleb128 0x19
 1435 03b4 0C030000 		.4byte	.LASF49
 1436 03b8 01       		.byte	0x1
 1437 03b9 F402     		.2byte	0x2f4
 1438 03bb 96000000 		.4byte	0x96
 1439 03bf 00000000 		.4byte	.LFB16
 1440 03c3 3C000000 		.4byte	.LFE16-.LFB16
 1441 03c7 01       		.uleb128 0x1
 1442 03c8 9C       		.byte	0x9c
 1443 03c9 FE030000 		.4byte	0x3fe
 1444 03cd 14       		.uleb128 0x14
 1445 03ce 62030000 		.4byte	.LASF35
 1446 03d2 01       		.byte	0x1
 1447 03d3 F402     		.2byte	0x2f4
 1448 03d5 8A000000 		.4byte	0x8a
 1449 03d9 28020000 		.4byte	.LLST13
 1450 03dd 14       		.uleb128 0x14
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 43


 1451 03de 86030000 		.4byte	.LASF50
 1452 03e2 01       		.byte	0x1
 1453 03e3 F402     		.2byte	0x2f4
 1454 03e5 96000000 		.4byte	0x96
 1455 03e9 49020000 		.4byte	.LLST14
 1456 03ed 15       		.uleb128 0x15
 1457 03ee C6010000 		.4byte	.LASF51
 1458 03f2 01       		.byte	0x1
 1459 03f3 F602     		.2byte	0x2f6
 1460 03f5 96000000 		.4byte	0x96
 1461 03f9 75020000 		.4byte	.LLST15
 1462 03fd 00       		.byte	0
 1463 03fe 19       		.uleb128 0x19
 1464 03ff A8000000 		.4byte	.LASF52
 1465 0403 01       		.byte	0x1
 1466 0404 2A03     		.2byte	0x32a
 1467 0406 A2000000 		.4byte	0xa2
 1468 040a 00000000 		.4byte	.LFB17
 1469 040e 34000000 		.4byte	.LFE17-.LFB17
 1470 0412 01       		.uleb128 0x1
 1471 0413 9C       		.byte	0x9c
 1472 0414 49040000 		.4byte	0x449
 1473 0418 14       		.uleb128 0x14
 1474 0419 62030000 		.4byte	.LASF35
 1475 041d 01       		.byte	0x1
 1476 041e 2A03     		.2byte	0x32a
 1477 0420 8A000000 		.4byte	0x8a
 1478 0424 90020000 		.4byte	.LLST16
 1479 0428 14       		.uleb128 0x14
 1480 0429 86030000 		.4byte	.LASF50
 1481 042d 01       		.byte	0x1
 1482 042e 2A03     		.2byte	0x32a
 1483 0430 96000000 		.4byte	0x96
 1484 0434 B1020000 		.4byte	.LLST17
 1485 0438 15       		.uleb128 0x15
 1486 0439 25010000 		.4byte	.LASF53
 1487 043d 01       		.byte	0x1
 1488 043e 2C03     		.2byte	0x32c
 1489 0440 C1000000 		.4byte	0xc1
 1490 0444 DA020000 		.4byte	.LLST18
 1491 0448 00       		.byte	0
 1492 0449 19       		.uleb128 0x19
 1493 044a 16000000 		.4byte	.LASF54
 1494 044e 01       		.byte	0x1
 1495 044f 5703     		.2byte	0x357
 1496 0451 AE000000 		.4byte	0xae
 1497 0455 00000000 		.4byte	.LFB18
 1498 0459 3C000000 		.4byte	.LFE18-.LFB18
 1499 045d 01       		.uleb128 0x1
 1500 045e 9C       		.byte	0x9c
 1501 045f 94040000 		.4byte	0x494
 1502 0463 14       		.uleb128 0x14
 1503 0464 62030000 		.4byte	.LASF35
 1504 0468 01       		.byte	0x1
 1505 0469 5703     		.2byte	0x357
 1506 046b 8A000000 		.4byte	0x8a
 1507 046f 2A030000 		.4byte	.LLST19
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 44


 1508 0473 14       		.uleb128 0x14
 1509 0474 86030000 		.4byte	.LASF50
 1510 0478 01       		.byte	0x1
 1511 0479 5703     		.2byte	0x357
 1512 047b 96000000 		.4byte	0x96
 1513 047f 4B030000 		.4byte	.LLST20
 1514 0483 15       		.uleb128 0x15
 1515 0484 4D010000 		.4byte	.LASF55
 1516 0488 01       		.byte	0x1
 1517 0489 5903     		.2byte	0x359
 1518 048b AE000000 		.4byte	0xae
 1519 048f 69030000 		.4byte	.LLST21
 1520 0493 00       		.byte	0
 1521 0494 0D       		.uleb128 0xd
 1522 0495 A4040000 		.4byte	0x4a4
 1523 0499 A4040000 		.4byte	0x4a4
 1524 049d 0E       		.uleb128 0xe
 1525 049e EC000000 		.4byte	0xec
 1526 04a2 02       		.byte	0x2
 1527 04a3 00       		.byte	0
 1528 04a4 0F       		.uleb128 0xf
 1529 04a5 8A000000 		.4byte	0x8a
 1530 04a9 09       		.uleb128 0x9
 1531 04aa 6C030000 		.4byte	.LASF56
 1532 04ae 01       		.byte	0x1
 1533 04af 21       		.byte	0x21
 1534 04b0 BA040000 		.4byte	0x4ba
 1535 04b4 05       		.uleb128 0x5
 1536 04b5 03       		.byte	0x3
 1537 04b6 00000000 		.4byte	ADC_channelsConfig
 1538 04ba 0F       		.uleb128 0xf
 1539 04bb 94040000 		.4byte	0x494
 1540 04bf 1A       		.uleb128 0x1a
 1541 04c0 F3000000 		.4byte	.LASF57
 1542 04c4 01       		.byte	0x1
 1543 04c5 18       		.byte	0x18
 1544 04c6 72000000 		.4byte	0x72
 1545 04ca 05       		.uleb128 0x5
 1546 04cb 03       		.byte	0x3
 1547 04cc 00000000 		.4byte	ADC_initVar
 1548 04d0 0D       		.uleb128 0xd
 1549 04d1 E0040000 		.4byte	0x4e0
 1550 04d5 E0040000 		.4byte	0x4e0
 1551 04d9 0E       		.uleb128 0xe
 1552 04da EC000000 		.4byte	0xec
 1553 04de 02       		.byte	0x2
 1554 04df 00       		.byte	0
 1555 04e0 05       		.uleb128 0x5
 1556 04e1 96000000 		.4byte	0x96
 1557 04e5 1A       		.uleb128 0x1a
 1558 04e6 3E030000 		.4byte	.LASF58
 1559 04ea 01       		.byte	0x1
 1560 04eb 19       		.byte	0x19
 1561 04ec F6040000 		.4byte	0x4f6
 1562 04f0 05       		.uleb128 0x5
 1563 04f1 03       		.byte	0x3
 1564 04f2 00000000 		.4byte	ADC_offset
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 45


 1565 04f6 05       		.uleb128 0x5
 1566 04f7 D0040000 		.4byte	0x4d0
 1567 04fb 0D       		.uleb128 0xd
 1568 04fc 0B050000 		.4byte	0x50b
 1569 0500 0B050000 		.4byte	0x50b
 1570 0504 0E       		.uleb128 0xe
 1571 0505 EC000000 		.4byte	0xec
 1572 0509 02       		.byte	0x2
 1573 050a 00       		.byte	0
 1574 050b 05       		.uleb128 0x5
 1575 050c A2000000 		.4byte	0xa2
 1576 0510 1A       		.uleb128 0x1a
 1577 0511 BC000000 		.4byte	.LASF59
 1578 0515 01       		.byte	0x1
 1579 0516 1A       		.byte	0x1a
 1580 0517 21050000 		.4byte	0x521
 1581 051b 05       		.uleb128 0x5
 1582 051c 03       		.byte	0x3
 1583 051d 00000000 		.4byte	ADC_countsPer10Volt
 1584 0521 05       		.uleb128 0x5
 1585 0522 FB040000 		.4byte	0x4fb
 1586 0526 1B       		.uleb128 0x1b
 1587 0527 B2020000 		.4byte	.LASF60
 1588 052b B2020000 		.4byte	.LASF60
 1589 052f 03       		.byte	0x3
 1590 0530 C0       		.byte	0xc0
 1591 0531 1B       		.uleb128 0x1b
 1592 0532 70010000 		.4byte	.LASF61
 1593 0536 70010000 		.4byte	.LASF61
 1594 053a 03       		.byte	0x3
 1595 053b BD       		.byte	0xbd
 1596 053c 1B       		.uleb128 0x1b
 1597 053d D6000000 		.4byte	.LASF62
 1598 0541 D6000000 		.4byte	.LASF62
 1599 0545 03       		.byte	0x3
 1600 0546 DA       		.byte	0xda
 1601 0547 00       		.byte	0
 1602              		.section	.debug_abbrev,"",%progbits
 1603              	.Ldebug_abbrev0:
 1604 0000 01       		.uleb128 0x1
 1605 0001 11       		.uleb128 0x11
 1606 0002 01       		.byte	0x1
 1607 0003 25       		.uleb128 0x25
 1608 0004 0E       		.uleb128 0xe
 1609 0005 13       		.uleb128 0x13
 1610 0006 0B       		.uleb128 0xb
 1611 0007 03       		.uleb128 0x3
 1612 0008 0E       		.uleb128 0xe
 1613 0009 1B       		.uleb128 0x1b
 1614 000a 0E       		.uleb128 0xe
 1615 000b 55       		.uleb128 0x55
 1616 000c 17       		.uleb128 0x17
 1617 000d 11       		.uleb128 0x11
 1618 000e 01       		.uleb128 0x1
 1619 000f 10       		.uleb128 0x10
 1620 0010 17       		.uleb128 0x17
 1621 0011 00       		.byte	0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 46


 1622 0012 00       		.byte	0
 1623 0013 02       		.uleb128 0x2
 1624 0014 24       		.uleb128 0x24
 1625 0015 00       		.byte	0
 1626 0016 0B       		.uleb128 0xb
 1627 0017 0B       		.uleb128 0xb
 1628 0018 3E       		.uleb128 0x3e
 1629 0019 0B       		.uleb128 0xb
 1630 001a 03       		.uleb128 0x3
 1631 001b 0E       		.uleb128 0xe
 1632 001c 00       		.byte	0
 1633 001d 00       		.byte	0
 1634 001e 03       		.uleb128 0x3
 1635 001f 24       		.uleb128 0x24
 1636 0020 00       		.byte	0
 1637 0021 0B       		.uleb128 0xb
 1638 0022 0B       		.uleb128 0xb
 1639 0023 3E       		.uleb128 0x3e
 1640 0024 0B       		.uleb128 0xb
 1641 0025 03       		.uleb128 0x3
 1642 0026 08       		.uleb128 0x8
 1643 0027 00       		.byte	0
 1644 0028 00       		.byte	0
 1645 0029 04       		.uleb128 0x4
 1646 002a 16       		.uleb128 0x16
 1647 002b 00       		.byte	0
 1648 002c 03       		.uleb128 0x3
 1649 002d 0E       		.uleb128 0xe
 1650 002e 3A       		.uleb128 0x3a
 1651 002f 0B       		.uleb128 0xb
 1652 0030 3B       		.uleb128 0x3b
 1653 0031 05       		.uleb128 0x5
 1654 0032 49       		.uleb128 0x49
 1655 0033 13       		.uleb128 0x13
 1656 0034 00       		.byte	0
 1657 0035 00       		.byte	0
 1658 0036 05       		.uleb128 0x5
 1659 0037 35       		.uleb128 0x35
 1660 0038 00       		.byte	0
 1661 0039 49       		.uleb128 0x49
 1662 003a 13       		.uleb128 0x13
 1663 003b 00       		.byte	0
 1664 003c 00       		.byte	0
 1665 003d 06       		.uleb128 0x6
 1666 003e 2E       		.uleb128 0x2e
 1667 003f 00       		.byte	0
 1668 0040 3F       		.uleb128 0x3f
 1669 0041 19       		.uleb128 0x19
 1670 0042 03       		.uleb128 0x3
 1671 0043 0E       		.uleb128 0xe
 1672 0044 3A       		.uleb128 0x3a
 1673 0045 0B       		.uleb128 0xb
 1674 0046 3B       		.uleb128 0x3b
 1675 0047 05       		.uleb128 0x5
 1676 0048 27       		.uleb128 0x27
 1677 0049 19       		.uleb128 0x19
 1678 004a 20       		.uleb128 0x20
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 47


 1679 004b 0B       		.uleb128 0xb
 1680 004c 00       		.byte	0
 1681 004d 00       		.byte	0
 1682 004e 07       		.uleb128 0x7
 1683 004f 2E       		.uleb128 0x2e
 1684 0050 01       		.byte	0x1
 1685 0051 3F       		.uleb128 0x3f
 1686 0052 19       		.uleb128 0x19
 1687 0053 03       		.uleb128 0x3
 1688 0054 0E       		.uleb128 0xe
 1689 0055 3A       		.uleb128 0x3a
 1690 0056 0B       		.uleb128 0xb
 1691 0057 3B       		.uleb128 0x3b
 1692 0058 0B       		.uleb128 0xb
 1693 0059 27       		.uleb128 0x27
 1694 005a 19       		.uleb128 0x19
 1695 005b 11       		.uleb128 0x11
 1696 005c 01       		.uleb128 0x1
 1697 005d 12       		.uleb128 0x12
 1698 005e 06       		.uleb128 0x6
 1699 005f 40       		.uleb128 0x40
 1700 0060 18       		.uleb128 0x18
 1701 0061 9742     		.uleb128 0x2117
 1702 0063 19       		.uleb128 0x19
 1703 0064 01       		.uleb128 0x1
 1704 0065 13       		.uleb128 0x13
 1705 0066 00       		.byte	0
 1706 0067 00       		.byte	0
 1707 0068 08       		.uleb128 0x8
 1708 0069 34       		.uleb128 0x34
 1709 006a 00       		.byte	0
 1710 006b 03       		.uleb128 0x3
 1711 006c 0E       		.uleb128 0xe
 1712 006d 3A       		.uleb128 0x3a
 1713 006e 0B       		.uleb128 0xb
 1714 006f 3B       		.uleb128 0x3b
 1715 0070 0B       		.uleb128 0xb
 1716 0071 49       		.uleb128 0x49
 1717 0072 13       		.uleb128 0x13
 1718 0073 02       		.uleb128 0x2
 1719 0074 17       		.uleb128 0x17
 1720 0075 00       		.byte	0
 1721 0076 00       		.byte	0
 1722 0077 09       		.uleb128 0x9
 1723 0078 34       		.uleb128 0x34
 1724 0079 00       		.byte	0
 1725 007a 03       		.uleb128 0x3
 1726 007b 0E       		.uleb128 0xe
 1727 007c 3A       		.uleb128 0x3a
 1728 007d 0B       		.uleb128 0xb
 1729 007e 3B       		.uleb128 0x3b
 1730 007f 0B       		.uleb128 0xb
 1731 0080 49       		.uleb128 0x49
 1732 0081 13       		.uleb128 0x13
 1733 0082 02       		.uleb128 0x2
 1734 0083 18       		.uleb128 0x18
 1735 0084 00       		.byte	0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 48


 1736 0085 00       		.byte	0
 1737 0086 0A       		.uleb128 0xa
 1738 0087 898201   		.uleb128 0x4109
 1739 008a 01       		.byte	0x1
 1740 008b 11       		.uleb128 0x11
 1741 008c 01       		.uleb128 0x1
 1742 008d 31       		.uleb128 0x31
 1743 008e 13       		.uleb128 0x13
 1744 008f 01       		.uleb128 0x1
 1745 0090 13       		.uleb128 0x13
 1746 0091 00       		.byte	0
 1747 0092 00       		.byte	0
 1748 0093 0B       		.uleb128 0xb
 1749 0094 8A8201   		.uleb128 0x410a
 1750 0097 00       		.byte	0
 1751 0098 02       		.uleb128 0x2
 1752 0099 18       		.uleb128 0x18
 1753 009a 9142     		.uleb128 0x2111
 1754 009c 18       		.uleb128 0x18
 1755 009d 00       		.byte	0
 1756 009e 00       		.byte	0
 1757 009f 0C       		.uleb128 0xc
 1758 00a0 898201   		.uleb128 0x4109
 1759 00a3 01       		.byte	0x1
 1760 00a4 11       		.uleb128 0x11
 1761 00a5 01       		.uleb128 0x1
 1762 00a6 31       		.uleb128 0x31
 1763 00a7 13       		.uleb128 0x13
 1764 00a8 00       		.byte	0
 1765 00a9 00       		.byte	0
 1766 00aa 0D       		.uleb128 0xd
 1767 00ab 01       		.uleb128 0x1
 1768 00ac 01       		.byte	0x1
 1769 00ad 49       		.uleb128 0x49
 1770 00ae 13       		.uleb128 0x13
 1771 00af 01       		.uleb128 0x1
 1772 00b0 13       		.uleb128 0x13
 1773 00b1 00       		.byte	0
 1774 00b2 00       		.byte	0
 1775 00b3 0E       		.uleb128 0xe
 1776 00b4 21       		.uleb128 0x21
 1777 00b5 00       		.byte	0
 1778 00b6 49       		.uleb128 0x49
 1779 00b7 13       		.uleb128 0x13
 1780 00b8 2F       		.uleb128 0x2f
 1781 00b9 0B       		.uleb128 0xb
 1782 00ba 00       		.byte	0
 1783 00bb 00       		.byte	0
 1784 00bc 0F       		.uleb128 0xf
 1785 00bd 26       		.uleb128 0x26
 1786 00be 00       		.byte	0
 1787 00bf 49       		.uleb128 0x49
 1788 00c0 13       		.uleb128 0x13
 1789 00c1 00       		.byte	0
 1790 00c2 00       		.byte	0
 1791 00c3 10       		.uleb128 0x10
 1792 00c4 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 49


 1793 00c5 01       		.byte	0x1
 1794 00c6 31       		.uleb128 0x31
 1795 00c7 13       		.uleb128 0x13
 1796 00c8 11       		.uleb128 0x11
 1797 00c9 01       		.uleb128 0x1
 1798 00ca 12       		.uleb128 0x12
 1799 00cb 06       		.uleb128 0x6
 1800 00cc 40       		.uleb128 0x40
 1801 00cd 18       		.uleb128 0x18
 1802 00ce 9742     		.uleb128 0x2117
 1803 00d0 19       		.uleb128 0x19
 1804 00d1 01       		.uleb128 0x1
 1805 00d2 13       		.uleb128 0x13
 1806 00d3 00       		.byte	0
 1807 00d4 00       		.byte	0
 1808 00d5 11       		.uleb128 0x11
 1809 00d6 898201   		.uleb128 0x4109
 1810 00d9 00       		.byte	0
 1811 00da 11       		.uleb128 0x11
 1812 00db 01       		.uleb128 0x1
 1813 00dc 31       		.uleb128 0x31
 1814 00dd 13       		.uleb128 0x13
 1815 00de 00       		.byte	0
 1816 00df 00       		.byte	0
 1817 00e0 12       		.uleb128 0x12
 1818 00e1 2E       		.uleb128 0x2e
 1819 00e2 00       		.byte	0
 1820 00e3 3F       		.uleb128 0x3f
 1821 00e4 19       		.uleb128 0x19
 1822 00e5 03       		.uleb128 0x3
 1823 00e6 0E       		.uleb128 0xe
 1824 00e7 3A       		.uleb128 0x3a
 1825 00e8 0B       		.uleb128 0xb
 1826 00e9 3B       		.uleb128 0x3b
 1827 00ea 05       		.uleb128 0x5
 1828 00eb 27       		.uleb128 0x27
 1829 00ec 19       		.uleb128 0x19
 1830 00ed 11       		.uleb128 0x11
 1831 00ee 01       		.uleb128 0x1
 1832 00ef 12       		.uleb128 0x12
 1833 00f0 06       		.uleb128 0x6
 1834 00f1 40       		.uleb128 0x40
 1835 00f2 18       		.uleb128 0x18
 1836 00f3 9742     		.uleb128 0x2117
 1837 00f5 19       		.uleb128 0x19
 1838 00f6 00       		.byte	0
 1839 00f7 00       		.byte	0
 1840 00f8 13       		.uleb128 0x13
 1841 00f9 2E       		.uleb128 0x2e
 1842 00fa 01       		.byte	0x1
 1843 00fb 3F       		.uleb128 0x3f
 1844 00fc 19       		.uleb128 0x19
 1845 00fd 03       		.uleb128 0x3
 1846 00fe 0E       		.uleb128 0xe
 1847 00ff 3A       		.uleb128 0x3a
 1848 0100 0B       		.uleb128 0xb
 1849 0101 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 50


 1850 0102 05       		.uleb128 0x5
 1851 0103 27       		.uleb128 0x27
 1852 0104 19       		.uleb128 0x19
 1853 0105 49       		.uleb128 0x49
 1854 0106 13       		.uleb128 0x13
 1855 0107 11       		.uleb128 0x11
 1856 0108 01       		.uleb128 0x1
 1857 0109 12       		.uleb128 0x12
 1858 010a 06       		.uleb128 0x6
 1859 010b 40       		.uleb128 0x40
 1860 010c 18       		.uleb128 0x18
 1861 010d 9742     		.uleb128 0x2117
 1862 010f 19       		.uleb128 0x19
 1863 0110 01       		.uleb128 0x1
 1864 0111 13       		.uleb128 0x13
 1865 0112 00       		.byte	0
 1866 0113 00       		.byte	0
 1867 0114 14       		.uleb128 0x14
 1868 0115 05       		.uleb128 0x5
 1869 0116 00       		.byte	0
 1870 0117 03       		.uleb128 0x3
 1871 0118 0E       		.uleb128 0xe
 1872 0119 3A       		.uleb128 0x3a
 1873 011a 0B       		.uleb128 0xb
 1874 011b 3B       		.uleb128 0x3b
 1875 011c 05       		.uleb128 0x5
 1876 011d 49       		.uleb128 0x49
 1877 011e 13       		.uleb128 0x13
 1878 011f 02       		.uleb128 0x2
 1879 0120 17       		.uleb128 0x17
 1880 0121 00       		.byte	0
 1881 0122 00       		.byte	0
 1882 0123 15       		.uleb128 0x15
 1883 0124 34       		.uleb128 0x34
 1884 0125 00       		.byte	0
 1885 0126 03       		.uleb128 0x3
 1886 0127 0E       		.uleb128 0xe
 1887 0128 3A       		.uleb128 0x3a
 1888 0129 0B       		.uleb128 0xb
 1889 012a 3B       		.uleb128 0x3b
 1890 012b 05       		.uleb128 0x5
 1891 012c 49       		.uleb128 0x49
 1892 012d 13       		.uleb128 0x13
 1893 012e 02       		.uleb128 0x2
 1894 012f 17       		.uleb128 0x17
 1895 0130 00       		.byte	0
 1896 0131 00       		.byte	0
 1897 0132 16       		.uleb128 0x16
 1898 0133 34       		.uleb128 0x34
 1899 0134 00       		.byte	0
 1900 0135 03       		.uleb128 0x3
 1901 0136 0E       		.uleb128 0xe
 1902 0137 3A       		.uleb128 0x3a
 1903 0138 0B       		.uleb128 0xb
 1904 0139 3B       		.uleb128 0x3b
 1905 013a 05       		.uleb128 0x5
 1906 013b 49       		.uleb128 0x49
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 51


 1907 013c 13       		.uleb128 0x13
 1908 013d 02       		.uleb128 0x2
 1909 013e 18       		.uleb128 0x18
 1910 013f 00       		.byte	0
 1911 0140 00       		.byte	0
 1912 0141 17       		.uleb128 0x17
 1913 0142 2E       		.uleb128 0x2e
 1914 0143 01       		.byte	0x1
 1915 0144 3F       		.uleb128 0x3f
 1916 0145 19       		.uleb128 0x19
 1917 0146 03       		.uleb128 0x3
 1918 0147 0E       		.uleb128 0xe
 1919 0148 3A       		.uleb128 0x3a
 1920 0149 0B       		.uleb128 0xb
 1921 014a 3B       		.uleb128 0x3b
 1922 014b 05       		.uleb128 0x5
 1923 014c 27       		.uleb128 0x27
 1924 014d 19       		.uleb128 0x19
 1925 014e 11       		.uleb128 0x11
 1926 014f 01       		.uleb128 0x1
 1927 0150 12       		.uleb128 0x12
 1928 0151 06       		.uleb128 0x6
 1929 0152 40       		.uleb128 0x40
 1930 0153 18       		.uleb128 0x18
 1931 0154 9742     		.uleb128 0x2117
 1932 0156 19       		.uleb128 0x19
 1933 0157 01       		.uleb128 0x1
 1934 0158 13       		.uleb128 0x13
 1935 0159 00       		.byte	0
 1936 015a 00       		.byte	0
 1937 015b 18       		.uleb128 0x18
 1938 015c 05       		.uleb128 0x5
 1939 015d 00       		.byte	0
 1940 015e 03       		.uleb128 0x3
 1941 015f 0E       		.uleb128 0xe
 1942 0160 3A       		.uleb128 0x3a
 1943 0161 0B       		.uleb128 0xb
 1944 0162 3B       		.uleb128 0x3b
 1945 0163 05       		.uleb128 0x5
 1946 0164 49       		.uleb128 0x49
 1947 0165 13       		.uleb128 0x13
 1948 0166 02       		.uleb128 0x2
 1949 0167 18       		.uleb128 0x18
 1950 0168 00       		.byte	0
 1951 0169 00       		.byte	0
 1952 016a 19       		.uleb128 0x19
 1953 016b 2E       		.uleb128 0x2e
 1954 016c 01       		.byte	0x1
 1955 016d 3F       		.uleb128 0x3f
 1956 016e 19       		.uleb128 0x19
 1957 016f 03       		.uleb128 0x3
 1958 0170 0E       		.uleb128 0xe
 1959 0171 3A       		.uleb128 0x3a
 1960 0172 0B       		.uleb128 0xb
 1961 0173 3B       		.uleb128 0x3b
 1962 0174 05       		.uleb128 0x5
 1963 0175 27       		.uleb128 0x27
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 52


 1964 0176 19       		.uleb128 0x19
 1965 0177 49       		.uleb128 0x49
 1966 0178 13       		.uleb128 0x13
 1967 0179 11       		.uleb128 0x11
 1968 017a 01       		.uleb128 0x1
 1969 017b 12       		.uleb128 0x12
 1970 017c 06       		.uleb128 0x6
 1971 017d 40       		.uleb128 0x40
 1972 017e 18       		.uleb128 0x18
 1973 017f 9642     		.uleb128 0x2116
 1974 0181 19       		.uleb128 0x19
 1975 0182 01       		.uleb128 0x1
 1976 0183 13       		.uleb128 0x13
 1977 0184 00       		.byte	0
 1978 0185 00       		.byte	0
 1979 0186 1A       		.uleb128 0x1a
 1980 0187 34       		.uleb128 0x34
 1981 0188 00       		.byte	0
 1982 0189 03       		.uleb128 0x3
 1983 018a 0E       		.uleb128 0xe
 1984 018b 3A       		.uleb128 0x3a
 1985 018c 0B       		.uleb128 0xb
 1986 018d 3B       		.uleb128 0x3b
 1987 018e 0B       		.uleb128 0xb
 1988 018f 49       		.uleb128 0x49
 1989 0190 13       		.uleb128 0x13
 1990 0191 3F       		.uleb128 0x3f
 1991 0192 19       		.uleb128 0x19
 1992 0193 02       		.uleb128 0x2
 1993 0194 18       		.uleb128 0x18
 1994 0195 00       		.byte	0
 1995 0196 00       		.byte	0
 1996 0197 1B       		.uleb128 0x1b
 1997 0198 2E       		.uleb128 0x2e
 1998 0199 00       		.byte	0
 1999 019a 3F       		.uleb128 0x3f
 2000 019b 19       		.uleb128 0x19
 2001 019c 3C       		.uleb128 0x3c
 2002 019d 19       		.uleb128 0x19
 2003 019e 6E       		.uleb128 0x6e
 2004 019f 0E       		.uleb128 0xe
 2005 01a0 03       		.uleb128 0x3
 2006 01a1 0E       		.uleb128 0xe
 2007 01a2 3A       		.uleb128 0x3a
 2008 01a3 0B       		.uleb128 0xb
 2009 01a4 3B       		.uleb128 0x3b
 2010 01a5 0B       		.uleb128 0xb
 2011 01a6 00       		.byte	0
 2012 01a7 00       		.byte	0
 2013 01a8 00       		.byte	0
 2014              		.section	.debug_loc,"",%progbits
 2015              	.Ldebug_loc0:
 2016              	.LLST0:
 2017 0000 66000000 		.4byte	.LVL5
 2018 0004 68000000 		.4byte	.LVL6
 2019 0008 0200     		.2byte	0x2
 2020 000a 30       		.byte	0x30
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 53


 2021 000b 9F       		.byte	0x9f
 2022 000c 68000000 		.4byte	.LVL6
 2023 0010 44010000 		.4byte	.LFE2
 2024 0014 0100     		.2byte	0x1
 2025 0016 53       		.byte	0x53
 2026 0017 00000000 		.4byte	0
 2027 001b 00000000 		.4byte	0
 2028              	.LLST1:
 2029 001f 5E000000 		.4byte	.LVL2
 2030 0023 62000000 		.4byte	.LVL3
 2031 0027 0100     		.2byte	0x1
 2032 0029 56       		.byte	0x56
 2033 002a 62000000 		.4byte	.LVL3
 2034 002e 68000000 		.4byte	.LVL6
 2035 0032 0100     		.2byte	0x1
 2036 0034 52       		.byte	0x52
 2037 0035 7A000000 		.4byte	.LVL7
 2038 0039 7C000000 		.4byte	.LVL8
 2039 003d 0100     		.2byte	0x1
 2040 003f 57       		.byte	0x57
 2041 0040 7C000000 		.4byte	.LVL8
 2042 0044 84000000 		.4byte	.LVL9
 2043 0048 0100     		.2byte	0x1
 2044 004a 55       		.byte	0x55
 2045 004b 84000000 		.4byte	.LVL9
 2046 004f 94000000 		.4byte	.LVL10
 2047 0053 0200     		.2byte	0x2
 2048 0055 77       		.byte	0x77
 2049 0056 00       		.sleb128 0
 2050 0057 94000000 		.4byte	.LVL10
 2051 005b A8000000 		.4byte	.LVL11
 2052 005f 1800     		.2byte	0x18
 2053 0061 74       		.byte	0x74
 2054 0062 00       		.sleb128 0
 2055 0063 72       		.byte	0x72
 2056 0064 00       		.sleb128 0
 2057 0065 22       		.byte	0x22
 2058 0066 06       		.byte	0x6
 2059 0067 0A       		.byte	0xa
 2060 0068 0037     		.2byte	0x3700
 2061 006a 1A       		.byte	0x1a
 2062 006b 74       		.byte	0x74
 2063 006c 00       		.sleb128 0
 2064 006d 73       		.byte	0x73
 2065 006e 00       		.sleb128 0
 2066 006f 22       		.byte	0x22
 2067 0070 23       		.byte	0x23
 2068 0071 0C       		.uleb128 0xc
 2069 0072 94       		.byte	0x94
 2070 0073 01       		.byte	0x1
 2071 0074 08       		.byte	0x8
 2072 0075 FF       		.byte	0xff
 2073 0076 1A       		.byte	0x1a
 2074 0077 21       		.byte	0x21
 2075 0078 9F       		.byte	0x9f
 2076 0079 A8000000 		.4byte	.LVL11
 2077 007d D4000000 		.4byte	.LVL13
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 54


 2078 0081 1C00     		.2byte	0x1c
 2079 0083 72       		.byte	0x72
 2080 0084 00       		.sleb128 0
 2081 0085 03       		.byte	0x3
 2082 0086 00000000 		.4byte	.LANCHOR0
 2083 008a 22       		.byte	0x22
 2084 008b 06       		.byte	0x6
 2085 008c 0A       		.byte	0xa
 2086 008d 0037     		.2byte	0x3700
 2087 008f 1A       		.byte	0x1a
 2088 0090 73       		.byte	0x73
 2089 0091 00       		.sleb128 0
 2090 0092 03       		.byte	0x3
 2091 0093 0C000000 		.4byte	.LANCHOR0+12
 2092 0097 22       		.byte	0x22
 2093 0098 94       		.byte	0x94
 2094 0099 01       		.byte	0x1
 2095 009a 08       		.byte	0x8
 2096 009b FF       		.byte	0xff
 2097 009c 1A       		.byte	0x1a
 2098 009d 21       		.byte	0x21
 2099 009e 9F       		.byte	0x9f
 2100 009f D4000000 		.4byte	.LVL13
 2101 00a3 44010000 		.4byte	.LFE2
 2102 00a7 1C00     		.2byte	0x1c
 2103 00a9 72       		.byte	0x72
 2104 00aa 00       		.sleb128 0
 2105 00ab 03       		.byte	0x3
 2106 00ac 00000000 		.4byte	.LANCHOR0
 2107 00b0 22       		.byte	0x22
 2108 00b1 06       		.byte	0x6
 2109 00b2 0A       		.byte	0xa
 2110 00b3 0037     		.2byte	0x3700
 2111 00b5 1A       		.byte	0x1a
 2112 00b6 73       		.byte	0x73
 2113 00b7 00       		.sleb128 0
 2114 00b8 03       		.byte	0x3
 2115 00b9 0B000000 		.4byte	.LANCHOR0+11
 2116 00bd 22       		.byte	0x22
 2117 00be 94       		.byte	0x94
 2118 00bf 01       		.byte	0x1
 2119 00c0 08       		.byte	0x8
 2120 00c1 FF       		.byte	0xff
 2121 00c2 1A       		.byte	0x1a
 2122 00c3 21       		.byte	0x21
 2123 00c4 9F       		.byte	0x9f
 2124 00c5 00000000 		.4byte	0
 2125 00c9 00000000 		.4byte	0
 2126              	.LLST2:
 2127 00cd BC000000 		.4byte	.LVL12
 2128 00d1 D6000000 		.4byte	.LVL14
 2129 00d5 0100     		.2byte	0x1
 2130 00d7 54       		.byte	0x54
 2131 00d8 00000000 		.4byte	0
 2132 00dc 00000000 		.4byte	0
 2133              	.LLST3:
 2134 00e0 00000000 		.4byte	.LVL18
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 55


 2135 00e4 10000000 		.4byte	.LVL19
 2136 00e8 0100     		.2byte	0x1
 2137 00ea 50       		.byte	0x50
 2138 00eb 10000000 		.4byte	.LVL19
 2139 00ef 2C000000 		.4byte	.LFE7
 2140 00f3 0400     		.2byte	0x4
 2141 00f5 F3       		.byte	0xf3
 2142 00f6 01       		.uleb128 0x1
 2143 00f7 50       		.byte	0x50
 2144 00f8 9F       		.byte	0x9f
 2145 00f9 00000000 		.4byte	0
 2146 00fd 00000000 		.4byte	0
 2147              	.LLST4:
 2148 0101 00000000 		.4byte	.LVL18
 2149 0105 10000000 		.4byte	.LVL19
 2150 0109 0200     		.2byte	0x2
 2151 010b 30       		.byte	0x30
 2152 010c 9F       		.byte	0x9f
 2153 010d 16000000 		.4byte	.LVL20
 2154 0111 20000000 		.4byte	.LVL21
 2155 0115 0100     		.2byte	0x1
 2156 0117 53       		.byte	0x53
 2157 0118 00000000 		.4byte	0
 2158 011c 00000000 		.4byte	0
 2159              	.LLST5:
 2160 0120 00000000 		.4byte	.LVL23
 2161 0124 0A000000 		.4byte	.LVL24
 2162 0128 0100     		.2byte	0x1
 2163 012a 50       		.byte	0x50
 2164 012b 0A000000 		.4byte	.LVL24
 2165 012f 18000000 		.4byte	.LFE8
 2166 0133 0400     		.2byte	0x4
 2167 0135 F3       		.byte	0xf3
 2168 0136 01       		.uleb128 0x1
 2169 0137 50       		.byte	0x50
 2170 0138 9F       		.byte	0x9f
 2171 0139 00000000 		.4byte	0
 2172 013d 00000000 		.4byte	0
 2173              	.LLST6:
 2174 0141 00000000 		.4byte	.LVL26
 2175 0145 04000000 		.4byte	.LVL27
 2176 0149 0100     		.2byte	0x1
 2177 014b 50       		.byte	0x50
 2178 014c 04000000 		.4byte	.LVL27
 2179 0150 10000000 		.4byte	.LFE9
 2180 0154 0400     		.2byte	0x4
 2181 0156 F3       		.byte	0xf3
 2182 0157 01       		.uleb128 0x1
 2183 0158 50       		.byte	0x50
 2184 0159 9F       		.byte	0x9f
 2185 015a 00000000 		.4byte	0
 2186 015e 00000000 		.4byte	0
 2187              	.LLST7:
 2188 0162 00000000 		.4byte	.LVL28
 2189 0166 04000000 		.4byte	.LVL29
 2190 016a 0100     		.2byte	0x1
 2191 016c 50       		.byte	0x50
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 56


 2192 016d 04000000 		.4byte	.LVL29
 2193 0171 18000000 		.4byte	.LFE10
 2194 0175 0400     		.2byte	0x4
 2195 0177 F3       		.byte	0xf3
 2196 0178 01       		.uleb128 0x1
 2197 0179 50       		.byte	0x50
 2198 017a 9F       		.byte	0x9f
 2199 017b 00000000 		.4byte	0
 2200 017f 00000000 		.4byte	0
 2201              	.LLST8:
 2202 0183 00000000 		.4byte	.LVL30
 2203 0187 04000000 		.4byte	.LVL31
 2204 018b 0100     		.2byte	0x1
 2205 018d 50       		.byte	0x50
 2206 018e 04000000 		.4byte	.LVL31
 2207 0192 18000000 		.4byte	.LFE11
 2208 0196 0400     		.2byte	0x4
 2209 0198 F3       		.byte	0xf3
 2210 0199 01       		.uleb128 0x1
 2211 019a 50       		.byte	0x50
 2212 019b 9F       		.byte	0x9f
 2213 019c 00000000 		.4byte	0
 2214 01a0 00000000 		.4byte	0
 2215              	.LLST9:
 2216 01a4 00000000 		.4byte	.LVL32
 2217 01a8 04000000 		.4byte	.LVL33
 2218 01ac 0100     		.2byte	0x1
 2219 01ae 50       		.byte	0x50
 2220 01af 04000000 		.4byte	.LVL33
 2221 01b3 10000000 		.4byte	.LFE12
 2222 01b7 0400     		.2byte	0x4
 2223 01b9 F3       		.byte	0xf3
 2224 01ba 01       		.uleb128 0x1
 2225 01bb 50       		.byte	0x50
 2226 01bc 9F       		.byte	0x9f
 2227 01bd 00000000 		.4byte	0
 2228 01c1 00000000 		.4byte	0
 2229              	.LLST10:
 2230 01c5 00000000 		.4byte	.LVL34
 2231 01c9 04000000 		.4byte	.LVL35
 2232 01cd 0100     		.2byte	0x1
 2233 01cf 50       		.byte	0x50
 2234 01d0 04000000 		.4byte	.LVL35
 2235 01d4 10000000 		.4byte	.LFE13
 2236 01d8 0400     		.2byte	0x4
 2237 01da F3       		.byte	0xf3
 2238 01db 01       		.uleb128 0x1
 2239 01dc 50       		.byte	0x50
 2240 01dd 9F       		.byte	0x9f
 2241 01de 00000000 		.4byte	0
 2242 01e2 00000000 		.4byte	0
 2243              	.LLST11:
 2244 01e6 00000000 		.4byte	.LVL36
 2245 01ea 04000000 		.4byte	.LVL37
 2246 01ee 0100     		.2byte	0x1
 2247 01f0 50       		.byte	0x50
 2248 01f1 04000000 		.4byte	.LVL37
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 57


 2249 01f5 0C000000 		.4byte	.LFE14
 2250 01f9 0400     		.2byte	0x4
 2251 01fb F3       		.byte	0xf3
 2252 01fc 01       		.uleb128 0x1
 2253 01fd 50       		.byte	0x50
 2254 01fe 9F       		.byte	0x9f
 2255 01ff 00000000 		.4byte	0
 2256 0203 00000000 		.4byte	0
 2257              	.LLST12:
 2258 0207 00000000 		.4byte	.LVL38
 2259 020b 04000000 		.4byte	.LVL39
 2260 020f 0100     		.2byte	0x1
 2261 0211 50       		.byte	0x50
 2262 0212 04000000 		.4byte	.LVL39
 2263 0216 0C000000 		.4byte	.LFE15
 2264 021a 0400     		.2byte	0x4
 2265 021c F3       		.byte	0xf3
 2266 021d 01       		.uleb128 0x1
 2267 021e 50       		.byte	0x50
 2268 021f 9F       		.byte	0x9f
 2269 0220 00000000 		.4byte	0
 2270 0224 00000000 		.4byte	0
 2271              	.LLST13:
 2272 0228 00000000 		.4byte	.LVL40
 2273 022c 28000000 		.4byte	.LVL44
 2274 0230 0100     		.2byte	0x1
 2275 0232 50       		.byte	0x50
 2276 0233 28000000 		.4byte	.LVL44
 2277 0237 3C000000 		.4byte	.LFE16
 2278 023b 0400     		.2byte	0x4
 2279 023d F3       		.byte	0xf3
 2280 023e 01       		.uleb128 0x1
 2281 023f 50       		.byte	0x50
 2282 0240 9F       		.byte	0x9f
 2283 0241 00000000 		.4byte	0
 2284 0245 00000000 		.4byte	0
 2285              	.LLST14:
 2286 0249 00000000 		.4byte	.LVL40
 2287 024d 10000000 		.4byte	.LVL41
 2288 0251 0100     		.2byte	0x1
 2289 0253 51       		.byte	0x51
 2290 0254 10000000 		.4byte	.LVL41
 2291 0258 16000000 		.4byte	.LVL42
 2292 025c 0400     		.2byte	0x4
 2293 025e F3       		.byte	0xf3
 2294 025f 01       		.uleb128 0x1
 2295 0260 51       		.byte	0x51
 2296 0261 9F       		.byte	0x9f
 2297 0262 16000000 		.4byte	.LVL42
 2298 0266 26000000 		.4byte	.LVL43
 2299 026a 0100     		.2byte	0x1
 2300 026c 51       		.byte	0x51
 2301 026d 00000000 		.4byte	0
 2302 0271 00000000 		.4byte	0
 2303              	.LLST15:
 2304 0275 26000000 		.4byte	.LVL43
 2305 0279 2B000000 		.4byte	.LVL45-1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 58


 2306 027d 0900     		.2byte	0x9
 2307 027f 73       		.byte	0x73
 2308 0280 00       		.sleb128 0
 2309 0281 75       		.byte	0x75
 2310 0282 00       		.sleb128 0
 2311 0283 22       		.byte	0x22
 2312 0284 71       		.byte	0x71
 2313 0285 00       		.sleb128 0
 2314 0286 1B       		.byte	0x1b
 2315 0287 9F       		.byte	0x9f
 2316 0288 00000000 		.4byte	0
 2317 028c 00000000 		.4byte	0
 2318              	.LLST16:
 2319 0290 00000000 		.4byte	.LVL46
 2320 0294 0E000000 		.4byte	.LVL48
 2321 0298 0100     		.2byte	0x1
 2322 029a 50       		.byte	0x50
 2323 029b 0E000000 		.4byte	.LVL48
 2324 029f 34000000 		.4byte	.LFE17
 2325 02a3 0400     		.2byte	0x4
 2326 02a5 F3       		.byte	0xf3
 2327 02a6 01       		.uleb128 0x1
 2328 02a7 50       		.byte	0x50
 2329 02a8 9F       		.byte	0x9f
 2330 02a9 00000000 		.4byte	0
 2331 02ad 00000000 		.4byte	0
 2332              	.LLST17:
 2333 02b1 00000000 		.4byte	.LVL46
 2334 02b5 0A000000 		.4byte	.LVL47
 2335 02b9 0100     		.2byte	0x1
 2336 02bb 51       		.byte	0x51
 2337 02bc 0A000000 		.4byte	.LVL47
 2338 02c0 18000000 		.4byte	.LVL50
 2339 02c4 0100     		.2byte	0x1
 2340 02c6 51       		.byte	0x51
 2341 02c7 18000000 		.4byte	.LVL50
 2342 02cb 1B000000 		.4byte	.LVL51-1
 2343 02cf 0100     		.2byte	0x1
 2344 02d1 50       		.byte	0x50
 2345 02d2 00000000 		.4byte	0
 2346 02d6 00000000 		.4byte	0
 2347              	.LLST18:
 2348 02da 10000000 		.4byte	.LVL49
 2349 02de 18000000 		.4byte	.LVL50
 2350 02e2 1A00     		.2byte	0x1a
 2351 02e4 71       		.byte	0x71
 2352 02e5 00       		.sleb128 0
 2353 02e6 F7       		.byte	0xf7
 2354 02e7 41       		.uleb128 0x41
 2355 02e8 F7       		.byte	0xf7
 2356 02e9 25       		.uleb128 0x25
 2357 02ea 0C       		.byte	0xc
 2358 02eb 80969800 		.4byte	0x989680
 2359 02ef F7       		.byte	0xf7
 2360 02f0 25       		.uleb128 0x25
 2361 02f1 1E       		.byte	0x1e
 2362 02f2 F7       		.byte	0xf7
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 59


 2363 02f3 2C       		.uleb128 0x2c
 2364 02f4 74       		.byte	0x74
 2365 02f5 00       		.sleb128 0
 2366 02f6 F7       		.byte	0xf7
 2367 02f7 33       		.uleb128 0x33
 2368 02f8 F7       		.byte	0xf7
 2369 02f9 2C       		.uleb128 0x2c
 2370 02fa 1B       		.byte	0x1b
 2371 02fb F7       		.byte	0xf7
 2372 02fc 25       		.uleb128 0x25
 2373 02fd 9F       		.byte	0x9f
 2374 02fe 18000000 		.4byte	.LVL50
 2375 0302 1B000000 		.4byte	.LVL51-1
 2376 0306 1A00     		.2byte	0x1a
 2377 0308 70       		.byte	0x70
 2378 0309 00       		.sleb128 0
 2379 030a F7       		.byte	0xf7
 2380 030b 41       		.uleb128 0x41
 2381 030c F7       		.byte	0xf7
 2382 030d 25       		.uleb128 0x25
 2383 030e 0C       		.byte	0xc
 2384 030f 80969800 		.4byte	0x989680
 2385 0313 F7       		.byte	0xf7
 2386 0314 25       		.uleb128 0x25
 2387 0315 1E       		.byte	0x1e
 2388 0316 F7       		.byte	0xf7
 2389 0317 2C       		.uleb128 0x2c
 2390 0318 74       		.byte	0x74
 2391 0319 00       		.sleb128 0
 2392 031a F7       		.byte	0xf7
 2393 031b 33       		.uleb128 0x33
 2394 031c F7       		.byte	0xf7
 2395 031d 2C       		.uleb128 0x2c
 2396 031e 1B       		.byte	0x1b
 2397 031f F7       		.byte	0xf7
 2398 0320 25       		.uleb128 0x25
 2399 0321 9F       		.byte	0x9f
 2400 0322 00000000 		.4byte	0
 2401 0326 00000000 		.4byte	0
 2402              	.LLST19:
 2403 032a 00000000 		.4byte	.LVL53
 2404 032e 08000000 		.4byte	.LVL54
 2405 0332 0100     		.2byte	0x1
 2406 0334 50       		.byte	0x50
 2407 0335 08000000 		.4byte	.LVL54
 2408 0339 3C000000 		.4byte	.LFE18
 2409 033d 0400     		.2byte	0x4
 2410 033f F3       		.byte	0xf3
 2411 0340 01       		.uleb128 0x1
 2412 0341 50       		.byte	0x50
 2413 0342 9F       		.byte	0x9f
 2414 0343 00000000 		.4byte	0
 2415 0347 00000000 		.4byte	0
 2416              	.LLST20:
 2417 034b 00000000 		.4byte	.LVL53
 2418 034f 0A000000 		.4byte	.LVL55
 2419 0353 0100     		.2byte	0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 60


 2420 0355 51       		.byte	0x51
 2421 0356 0A000000 		.4byte	.LVL55
 2422 035a 15000000 		.4byte	.LVL57-1
 2423 035e 0100     		.2byte	0x1
 2424 0360 51       		.byte	0x51
 2425 0361 00000000 		.4byte	0
 2426 0365 00000000 		.4byte	0
 2427              	.LLST21:
 2428 0369 10000000 		.4byte	.LVL56
 2429 036d 15000000 		.4byte	.LVL57-1
 2430 0371 1600     		.2byte	0x16
 2431 0373 71       		.byte	0x71
 2432 0374 00       		.sleb128 0
 2433 0375 F7       		.byte	0xf7
 2434 0376 41       		.uleb128 0x41
 2435 0377 F7       		.byte	0xf7
 2436 0378 3A       		.uleb128 0x3a
 2437 0379 F4       		.byte	0xf4
 2438 037a 3A       		.uleb128 0x3a
 2439 037b 04       		.byte	0x4
 2440 037c 00002041 		.4byte	0x41200000
 2441 0380 1E       		.byte	0x1e
 2442 0381 75       		.byte	0x75
 2443 0382 00       		.sleb128 0
 2444 0383 F7       		.byte	0xf7
 2445 0384 33       		.uleb128 0x33
 2446 0385 F7       		.byte	0xf7
 2447 0386 3A       		.uleb128 0x3a
 2448 0387 1B       		.byte	0x1b
 2449 0388 9F       		.byte	0x9f
 2450 0389 00000000 		.4byte	0
 2451 038d 00000000 		.4byte	0
 2452              		.section	.debug_aranges,"",%progbits
 2453 0000 A4000000 		.4byte	0xa4
 2454 0004 0200     		.2byte	0x2
 2455 0006 00000000 		.4byte	.Ldebug_info0
 2456 000a 04       		.byte	0x4
 2457 000b 00       		.byte	0
 2458 000c 0000     		.2byte	0
 2459 000e 0000     		.2byte	0
 2460 0010 00000000 		.4byte	.LFB2
 2461 0014 44010000 		.4byte	.LFE2-.LFB2
 2462 0018 00000000 		.4byte	.LFB3
 2463 001c 2C000000 		.4byte	.LFE3-.LFB3
 2464 0020 00000000 		.4byte	.LFB1
 2465 0024 1C000000 		.4byte	.LFE1-.LFB1
 2466 0028 00000000 		.4byte	.LFB4
 2467 002c 10000000 		.4byte	.LFE4-.LFB4
 2468 0030 00000000 		.4byte	.LFB5
 2469 0034 14000000 		.4byte	.LFE5-.LFB5
 2470 0038 00000000 		.4byte	.LFB6
 2471 003c 14000000 		.4byte	.LFE6-.LFB6
 2472 0040 00000000 		.4byte	.LFB7
 2473 0044 2C000000 		.4byte	.LFE7-.LFB7
 2474 0048 00000000 		.4byte	.LFB8
 2475 004c 18000000 		.4byte	.LFE8-.LFB8
 2476 0050 00000000 		.4byte	.LFB9
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 61


 2477 0054 10000000 		.4byte	.LFE9-.LFB9
 2478 0058 00000000 		.4byte	.LFB10
 2479 005c 18000000 		.4byte	.LFE10-.LFB10
 2480 0060 00000000 		.4byte	.LFB11
 2481 0064 18000000 		.4byte	.LFE11-.LFB11
 2482 0068 00000000 		.4byte	.LFB12
 2483 006c 10000000 		.4byte	.LFE12-.LFB12
 2484 0070 00000000 		.4byte	.LFB13
 2485 0074 10000000 		.4byte	.LFE13-.LFB13
 2486 0078 00000000 		.4byte	.LFB14
 2487 007c 0C000000 		.4byte	.LFE14-.LFB14
 2488 0080 00000000 		.4byte	.LFB15
 2489 0084 0C000000 		.4byte	.LFE15-.LFB15
 2490 0088 00000000 		.4byte	.LFB16
 2491 008c 3C000000 		.4byte	.LFE16-.LFB16
 2492 0090 00000000 		.4byte	.LFB17
 2493 0094 34000000 		.4byte	.LFE17-.LFB17
 2494 0098 00000000 		.4byte	.LFB18
 2495 009c 3C000000 		.4byte	.LFE18-.LFB18
 2496 00a0 00000000 		.4byte	0
 2497 00a4 00000000 		.4byte	0
 2498              		.section	.debug_ranges,"",%progbits
 2499              	.Ldebug_ranges0:
 2500 0000 00000000 		.4byte	.LFB2
 2501 0004 44010000 		.4byte	.LFE2
 2502 0008 00000000 		.4byte	.LFB3
 2503 000c 2C000000 		.4byte	.LFE3
 2504 0010 00000000 		.4byte	.LFB1
 2505 0014 1C000000 		.4byte	.LFE1
 2506 0018 00000000 		.4byte	.LFB4
 2507 001c 10000000 		.4byte	.LFE4
 2508 0020 00000000 		.4byte	.LFB5
 2509 0024 14000000 		.4byte	.LFE5
 2510 0028 00000000 		.4byte	.LFB6
 2511 002c 14000000 		.4byte	.LFE6
 2512 0030 00000000 		.4byte	.LFB7
 2513 0034 2C000000 		.4byte	.LFE7
 2514 0038 00000000 		.4byte	.LFB8
 2515 003c 18000000 		.4byte	.LFE8
 2516 0040 00000000 		.4byte	.LFB9
 2517 0044 10000000 		.4byte	.LFE9
 2518 0048 00000000 		.4byte	.LFB10
 2519 004c 18000000 		.4byte	.LFE10
 2520 0050 00000000 		.4byte	.LFB11
 2521 0054 18000000 		.4byte	.LFE11
 2522 0058 00000000 		.4byte	.LFB12
 2523 005c 10000000 		.4byte	.LFE12
 2524 0060 00000000 		.4byte	.LFB13
 2525 0064 10000000 		.4byte	.LFE13
 2526 0068 00000000 		.4byte	.LFB14
 2527 006c 0C000000 		.4byte	.LFE14
 2528 0070 00000000 		.4byte	.LFB15
 2529 0074 0C000000 		.4byte	.LFE15
 2530 0078 00000000 		.4byte	.LFB16
 2531 007c 3C000000 		.4byte	.LFE16
 2532 0080 00000000 		.4byte	.LFB17
 2533 0084 34000000 		.4byte	.LFE17
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 62


 2534 0088 00000000 		.4byte	.LFB18
 2535 008c 3C000000 		.4byte	.LFE18
 2536 0090 00000000 		.4byte	0
 2537 0094 00000000 		.4byte	0
 2538              		.section	.debug_line,"",%progbits
 2539              	.Ldebug_line0:
 2540 0000 D1020000 		.section	.debug_str,"MS",%progbits,1
 2540      02004B00 
 2540      00000201 
 2540      FB0E0D00 
 2540      01010101 
 2541              	.LASF11:
 2542 0000 75696E74 		.ascii	"uint16\000"
 2542      313600
 2543              	.LASF48:
 2544 0007 61646347 		.ascii	"adcGain\000"
 2544      61696E00 
 2545              	.LASF24:
 2546 000f 636F756E 		.ascii	"counts\000"
 2546      747300
 2547              	.LASF54:
 2548 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2548      436F756E 
 2548      7473546F 
 2548      5F566F6C 
 2548      747300
 2549              	.LASF26:
 2550 0029 4144435F 		.ascii	"ADC_Init\000"
 2550      496E6974 
 2550      00
 2551              	.LASF0:
 2552 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2552      206C6F6E 
 2552      6720756E 
 2552      7369676E 
 2552      65642069 
 2553              	.LASF25:
 2554 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2554      496E7075 
 2554      7473506C 
 2554      6163656D 
 2554      656E7400 
 2555              	.LASF29:
 2556 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2556      53746172 
 2556      74436F6E 
 2556      76657274 
 2556      00
 2557              	.LASF1:
 2558 006e 6C6F6E67 		.ascii	"long long int\000"
 2558      206C6F6E 
 2558      6720696E 
 2558      7400
 2559              	.LASF4:
 2560 007c 7369676E 		.ascii	"signed char\000"
 2560      65642063 
 2560      68617200 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 63


 2561              	.LASF31:
 2562 0088 73746174 		.ascii	"status\000"
 2562      757300
 2563              	.LASF14:
 2564 008f 696E7433 		.ascii	"int32\000"
 2564      3200
 2565              	.LASF27:
 2566 0095 4144435F 		.ascii	"ADC_Start\000"
 2566      53746172 
 2566      7400
 2567              	.LASF7:
 2568 009f 6C6F6E67 		.ascii	"long int\000"
 2568      20696E74 
 2568      00
 2569              	.LASF52:
 2570 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2570      436F756E 
 2570      7473546F 
 2570      5F75566F 
 2570      6C747300 
 2571              	.LASF59:
 2572 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2572      636F756E 
 2572      74735065 
 2572      72313056 
 2572      6F6C7400 
 2573              	.LASF10:
 2574 00d0 75696E74 		.ascii	"uint8\000"
 2574      3800
 2575              	.LASF62:
 2576 00d6 43794465 		.ascii	"CyDelayUs\000"
 2576      6C617955 
 2576      7300
 2577              	.LASF16:
 2578 00e0 646F7562 		.ascii	"double\000"
 2578      6C6500
 2579              	.LASF12:
 2580 00e7 75696E74 		.ascii	"uint32\000"
 2580      333200
 2581              	.LASF38:
 2582 00ee 6D61736B 		.ascii	"mask\000"
 2582      00
 2583              	.LASF57:
 2584 00f3 4144435F 		.ascii	"ADC_initVar\000"
 2584      696E6974 
 2584      56617200 
 2585              	.LASF34:
 2586 00ff 7265744D 		.ascii	"retMode\000"
 2586      6F646500 
 2587              	.LASF43:
 2588 0107 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2588      5365744C 
 2588      696D6974 
 2588      4D61736B 
 2588      00
 2589              	.LASF9:
 2590 0118 756E7369 		.ascii	"unsigned int\000"
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 64


 2590      676E6564 
 2590      20696E74 
 2590      00
 2591              	.LASF53:
 2592 0125 75566F6C 		.ascii	"uVolts\000"
 2592      747300
 2593              	.LASF8:
 2594 012c 6C6F6E67 		.ascii	"long unsigned int\000"
 2594      20756E73 
 2594      69676E65 
 2594      6420696E 
 2594      7400
 2595              	.LASF44:
 2596 013e 4144435F 		.ascii	"ADC_SetSatMask\000"
 2596      53657453 
 2596      61744D61 
 2596      736B00
 2597              	.LASF55:
 2598 014d 766F6C74 		.ascii	"volts\000"
 2598      7300
 2599              	.LASF23:
 2600 0153 746D7052 		.ascii	"tmpRegVal\000"
 2600      65675661 
 2600      6C00
 2601              	.LASF6:
 2602 015d 73686F72 		.ascii	"short unsigned int\000"
 2602      7420756E 
 2602      7369676E 
 2602      65642069 
 2602      6E7400
 2603              	.LASF61:
 2604 0170 4379496E 		.ascii	"CyIntSetVector\000"
 2604      74536574 
 2604      56656374 
 2604      6F7200
 2605              	.LASF30:
 2606 017f 4144435F 		.ascii	"ADC_StopConvert\000"
 2606      53746F70 
 2606      436F6E76 
 2606      65727400 
 2607              	.LASF65:
 2608 018f 5A3A5C47 		.ascii	"Z:\\Git\\WA101\\ww101-shield\\firmware\\TestProgram"
 2608      69745C57 
 2608      41313031 
 2608      5C777731 
 2608      30312D73 
 2609 01bd 344D2E63 		.ascii	"4M.cydsn\000"
 2609      7964736E 
 2609      00
 2610              	.LASF51:
 2611 01c6 6D566F6C 		.ascii	"mVolts\000"
 2611      747300
 2612              	.LASF19:
 2613 01cd 72656733 		.ascii	"reg32\000"
 2613      3200
 2614              	.LASF15:
 2615 01d3 666C6F61 		.ascii	"float32\000"
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 65


 2615      74333200 
 2616              	.LASF21:
 2617 01db 73697A65 		.ascii	"sizetype\000"
 2617      74797065 
 2617      00
 2618              	.LASF40:
 2619 01e4 6C6F774C 		.ascii	"lowLimit\000"
 2619      696D6974 
 2619      00
 2620              	.LASF20:
 2621 01ed 6C6F6E67 		.ascii	"long double\000"
 2621      20646F75 
 2621      626C6500 
 2622              	.LASF41:
 2623 01f9 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2623      53657448 
 2623      6967684C 
 2623      696D6974 
 2623      00
 2624              	.LASF63:
 2625 020a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2625      43313120 
 2625      352E342E 
 2625      31203230 
 2625      31363036 
 2626 023d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2626      20726576 
 2626      6973696F 
 2626      6E203233 
 2626      37373135 
 2627 0270 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 2627      66756E63 
 2627      74696F6E 
 2627      2D736563 
 2627      74696F6E 
 2628              	.LASF32:
 2629 0298 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2629      4973456E 
 2629      64436F6E 
 2629      76657273 
 2629      696F6E00 
 2630              	.LASF17:
 2631 02ac 696E7436 		.ascii	"int64\000"
 2631      3400
 2632              	.LASF60:
 2633 02b2 4379496E 		.ascii	"CyIntSetPriority\000"
 2633      74536574 
 2633      5072696F 
 2633      72697479 
 2633      00
 2634              	.LASF37:
 2635 02c3 4144435F 		.ascii	"ADC_SetChanMask\000"
 2635      53657443 
 2635      68616E4D 
 2635      61736B00 
 2636              	.LASF64:
 2637 02d3 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 66


 2637      72617465 
 2637      645F536F 
 2637      75726365 
 2637      5C50536F 
 2638              	.LASF47:
 2639 02f0 4144435F 		.ascii	"ADC_SetGain\000"
 2639      53657447 
 2639      61696E00 
 2640              	.LASF2:
 2641 02fc 666C6F61 		.ascii	"float\000"
 2641      7400
 2642              	.LASF42:
 2643 0302 68696768 		.ascii	"highLimit\000"
 2643      4C696D69 
 2643      7400
 2644              	.LASF49:
 2645 030c 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2645      436F756E 
 2645      7473546F 
 2645      5F6D566F 
 2645      6C747300 
 2646              	.LASF39:
 2647 0320 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2647      5365744C 
 2647      6F774C69 
 2647      6D697400 
 2648              	.LASF5:
 2649 0330 756E7369 		.ascii	"unsigned char\000"
 2649      676E6564 
 2649      20636861 
 2649      7200
 2650              	.LASF58:
 2651 033e 4144435F 		.ascii	"ADC_offset\000"
 2651      6F666673 
 2651      657400
 2652              	.LASF3:
 2653 0349 73686F72 		.ascii	"short int\000"
 2653      7420696E 
 2653      7400
 2654              	.LASF28:
 2655 0353 4144435F 		.ascii	"ADC_Stop\000"
 2655      53746F70 
 2655      00
 2656              	.LASF22:
 2657 035c 63684E75 		.ascii	"chNum\000"
 2657      6D00
 2658              	.LASF35:
 2659 0362 6368616E 		.ascii	"chan\000"
 2659      00
 2660              	.LASF18:
 2661 0367 63686172 		.ascii	"char\000"
 2661      00
 2662              	.LASF56:
 2663 036c 4144435F 		.ascii	"ADC_channelsConfig\000"
 2663      6368616E 
 2663      6E656C73 
 2663      436F6E66 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccI9W9Nc.s 			page 67


 2663      696700
 2664              	.LASF46:
 2665 037f 6F666673 		.ascii	"offset\000"
 2665      657400
 2666              	.LASF50:
 2667 0386 61646343 		.ascii	"adcCounts\000"
 2667      6F756E74 
 2667      7300
 2668              	.LASF66:
 2669 0390 4144435F 		.ascii	"ADC_Enable\000"
 2669      456E6162 
 2669      6C6500
 2670              	.LASF13:
 2671 039b 696E7431 		.ascii	"int16\000"
 2671      3600
 2672              	.LASF45:
 2673 03a1 4144435F 		.ascii	"ADC_SetOffset\000"
 2673      5365744F 
 2673      66667365 
 2673      7400
 2674              	.LASF36:
 2675 03af 72657375 		.ascii	"result\000"
 2675      6C7400
 2676              	.LASF33:
 2677 03b6 4144435F 		.ascii	"ADC_GetResult16\000"
 2677      47657452 
 2677      6573756C 
 2677      74313600 
 2678              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
